[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "js/admin_blockly.js",
    "content": "import Dispatcher from \"./core/Dispatcher\";\n\nimport WorkspaceModule      from \"./modules/WorkspaceModule\";\n\n/**\n * Модуль \"Редактор блоков\" административного интерфейса web-приложения \"Макетная плата\"\n *\n * Задаёт взаимосвязи между событиями и функциями модулей.\n * Запускается в браузере администратора приложения.\n */\nclass AdminBlocklyApplication {\n    /**\n     * Создать экземпляр приложения\n     */\n    constructor() {\n        /** @type {Dispatcher} диспетчер событий */\n        this._dispatcher = new Dispatcher();\n\n        /** @type {Object} общая конфигурация */\n        this._config = {};\n\n        /** @type {string} ID DOM-узла */\n        this._container_id = undefined;\n\n        /** @type {function} Обработчик события `изменены данные` */\n        this._on_change_callback = function() {};\n\n        this._defineChains();\n    }\n\n    /**\n     * Преобразовать пользовательскую конфигурацию в настройки модулей\n     *\n     * Конфигурация, удобная для пользователя, преобразуется\n     * в конфигурацию, требуемую в отдельных модулях\n     *\n     * @param {Object} config пользовательская конфигурация\n     */\n    configure(config) {\n        if (!config) {return true}\n\n        this._container_id = config.containerId || \"\";\n\n        this._config = {\n            ws: {\n                allBlocks: config.allBlocks,\n                useScrollbars: true,\n                zoomInitial: config.workspaceZoomInitial,\n            },\n        };\n\n        for (let conf_item in this._config) {\n            this._config[conf_item].logging = {\n                local: config.noRemoteLogs\n            }\n        }\n    }\n\n    /**\n     * Запустить приложение\n     *\n     * Инициализируются модули, выполняется подписка диспетчера на них\n     *\n     * @param {boolean} [types=false] генерировать дополнительные поля в блоках\n     */\n    run(types=false) {\n        this._initModules(types);\n        this._subscribeToModules();\n\n        this._dispatcher.always(['ws:*']);\n    }\n\n    /**\n     * Получить необходимое для сборки набранного кода количество блоков\n     *\n     * @returns {number} необходимое количество блоков\n     */\n    getBlockLimit() {\n        return this.ws.getBlockLimit();\n    }\n\n    /**\n     * Получить отображаемые в данный момент коды\n     *\n     * Формат возвращаемого объекта:\n     *      - ключ: `main`/ ID блока-обработчика\n     *      - значение: {commands:Array, button:number}, где `commands` - JSON-код программы, `button` - код клавиши\n     *\n     * @returns {Object} основной код и коды обработчиков\n     */\n    getHandlers() {\n        return this.ws.getAllHandlers();\n    }\n\n    /**\n     * Получить XML-дерево набранного кода\n     *\n     * @returns {string} строка с XML-деревом\n     */\n    getCodeXml() {\n        return this.ws.getTree();\n    }\n\n    /**\n     * Отобразить програмный код в виде XML-дерева\n     *\n     * @param {string} code_xml XML-дерево, задающее программный код\n     */\n    setCodeXml(code_xml) {\n        this.ws.loadTree(code_xml);\n    }\n\n    /**\n     * Задать обработчик события `изменены данные`\n     *\n     * @param {function|null} callback обработчик события `изменены данные`\n     */\n    onChange(callback) {\n        this._on_change_callback = callback;\n    }\n\n    /**\n     * Подогнать размер редактора под размер DOM-контейнера\n     */\n    resize() {\n        this.ws.resize();\n    }\n\n    /**\n     * Получить значения полей ввода пределов количества блоков по типам\n     *\n     * Формат возвращаемого объекта:\n     *      - ключ:     {string} тип блока\n     *      - значение: {number} предел количества блоков по типу\n     *\n     * @returns {Object} значения полей ввода пределов количества блоков по типам\n     */\n    getBlockTypeLimits() {\n        return this.ws.getBlockLimitInputsByType();\n    }\n\n    /**\n     * Задать значения полей ввода пределов количества блоков по типам\n     *\n     * @param {Object} block_counts объект, в котором:\n     *      - ключ:     {string} тип блока\n     *      - значение: {number} предел количества блоков по типу\n     */\n    setBlockTypeLimits(block_type_limits) {\n        this.ws.setBlockLimitInputsByType(block_type_limits);\n    }\n\n    /**\n     * Инициализировать модули\n     *\n     * Используется заданная ранее конфигурация модулей\n     *\n     * @param {boolean} [types=false] генерировать дополнительные поля в блоках\n     *\n     * @private\n     */\n    _initModules(types=false) {\n        /// Модули\n\n        /** @type {WorkspaceModule} модуль рабочей области */\n        this.ws = new WorkspaceModule(this._config.ws);\n\n        this.ws.wakeUp();\n\n        if (types) {\n            this.ws.generateExtraFields(true);\n        }\n    }\n\n    /**\n     * Подписать диспетчер на события модулей\n     *\n     * @private\n     */\n    _subscribeToModules() {\n        this._dispatcher.subscribe(this.ws);\n    }\n\n    /**\n     * Определить цепочки-обработчики\n     *\n     * @private\n     */\n    _defineChains() {\n        $(document).ready(() => {\n            this.ws.inject(document.getElementById(this._container_id));\n        });\n\n        this._dispatcher.on(\"ws:change\", () => {\n            if (typeof this._on_change_callback === 'function') {\n                this._on_change_callback();\n            }\n        })\n    }\n}\n\nwindow.AdminBlocklyApplication = AdminBlocklyApplication;\n\nexport default AdminBlocklyApplication;\n",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/admin_blockly.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "AdminBlocklyApplication",
    "memberof": "js/admin_blockly.js",
    "static": true,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/admin_blockly.js",
    "importStyle": "AdminBlocklyApplication",
    "description": "Модуль \"Редактор блоков\" административного интерфейса web-приложения \"Макетная плата\"\n\nЗадаёт взаимосвязи между событиями и функциями модулей.\nЗапускается в браузере администратора приложения.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#constructor",
    "access": "public",
    "description": "Создать экземпляр приложения",
    "lineNumber": 15
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_dispatcher",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#_dispatcher",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Dispatcher"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_config",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#_config",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_container_id",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#_container_id",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "configure",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#configure",
    "access": "public",
    "description": "Преобразовать пользовательскую конфигурацию в настройки модулей\n\nКонфигурация, удобная для пользователя, преобразуется\nв конфигурацию, требуемую в отдельных модулях",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "пользовательская конфигурация"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "run",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#run",
    "access": "public",
    "description": "Запустить приложение\n\nИнициализируются модули, выполняется подписка диспетчера на них",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "types",
        "description": "генерировать дополнительные поля в блоках"
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "getBlockLimit",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#getBlockLimit",
    "access": "public",
    "description": "Получить необходимое для сборки набранного кода количество блоков",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} необходимое количество блоков"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "необходимое количество блоков"
    },
    "params": []
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "getHandlers",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#getHandlers",
    "access": "public",
    "description": "Получить отображаемые в данный момент коды\n\nФормат возвращаемого объекта:\n     - ключ: `main`/ ID блока-обработчика\n     - значение: {commands:Array, button:number}, где `commands` - JSON-код программы, `button` - код клавиши",
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} основной код и коды обработчиков"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "основной код и коды обработчиков"
    },
    "params": []
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "getCodeXml",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#getCodeXml",
    "access": "public",
    "description": "Получить XML-дерево набранного кода",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} строка с XML-деревом"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "строка с XML-деревом"
    },
    "params": []
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "setCodeXml",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#setCodeXml",
    "access": "public",
    "description": "Отобразить програмный код в виде XML-дерева",
    "lineNumber": 109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code_xml",
        "description": "XML-дерево, задающее программный код"
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "onChange",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#onChange",
    "access": "public",
    "description": "Задать обработчик события `изменены данные`",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "function",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "обработчик события `изменены данные`"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_on_change_callback",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#_on_change_callback",
    "access": "private",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "resize",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#resize",
    "access": "public",
    "description": "Подогнать размер редактора под размер DOM-контейнера",
    "lineNumber": 125,
    "params": [],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "getBlockTypeLimits",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#getBlockTypeLimits",
    "access": "public",
    "description": "Получить значения полей ввода пределов количества блоков по типам\n\nФормат возвращаемого объекта:\n     - ключ:     {string} тип блока\n     - значение: {number} предел количества блоков по типу",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} значения полей ввода пределов количества блоков по типам"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "значения полей ввода пределов количества блоков по типам"
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "setBlockTypeLimits",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#setBlockTypeLimits",
    "access": "public",
    "description": "Задать значения полей ввода пределов количества блоков по типам",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "block_counts",
        "description": "объект, в котором:\n     - ключ:     {string} тип блока\n     - значение: {number} предел количества блоков по типу"
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "_initModules",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#_initModules",
    "access": "private",
    "description": "Инициализировать модули\n\nИспользуется заданная ранее конфигурация модулей",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "types",
        "description": "генерировать дополнительные поля в блоках"
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "ws",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#ws",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "WorkspaceModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "_subscribeToModules",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#_subscribeToModules",
    "access": "private",
    "description": "Подписать диспетчер на события модулей",
    "lineNumber": 180,
    "params": [],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "_defineChains",
    "memberof": "js/admin_blockly.js~AdminBlocklyApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_blockly.js~AdminBlocklyApplication#_defineChains",
    "access": "private",
    "description": "Определить цепочки-обработчики",
    "lineNumber": 189,
    "params": [],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "js/admin_board.js",
    "content": "import Dispatcher from \"./core/Dispatcher\";\n\nimport BreadboardModule      from \"./modules/BreadboardModule\";\n\n/**\n * Модуль \"Редактор платы\" административного интерфейса web-приложения \"Макетная плата\"\n *\n * Задаёт взаимосвязи между событиями и функциями модулей.\n * Запускается в браузере администратора приложения.\n */\nclass AdminBoardApplication {\n    /**\n     * Создать экземпляр приложения\n     */\n    constructor() {\n        /** @type {Dispatcher} диспетчер событий */\n        this._dispatcher = new Dispatcher();\n\n        /** @type {Object} общая конфигурация */\n        this._config = {};\n\n        /** @type {function} Обработчик события `изменены данные` */\n        this._on_change_callback = function() {};\n\n        this._defineChains();\n    }\n\n    /**\n     * Преобразовать пользовательскую конфигурацию в настройки модулей\n     *\n     * Конфигурация, удобная для пользователя, преобразуется\n     * в конфигурацию, требуемую в отдельных модулях\n     *\n     * @param {Object} config пользовательская конфигурация\n     */\n    configure(config) {\n        if (!config) {return true}\n\n        this._container_id = config.containerId || \"\";\n    }\n\n    /**\n     * Запустить приложение\n     *\n     * Инициализируются модули, выполняется подписка диспетчера на них\n     */\n    run() {\n        this._initModules();\n        this._subscribeToModules();\n\n        this._dispatcher.always(['bb:*']);\n    }\n\n    /**\n     * Обновить данные приложения\n     *\n     * @param {Array<Object>} plates плашки\n     * @param {Array<Object>} currents токи\n     */\n    setData(plates, currents) {\n        this.bb.updatePlates(plates);\n        // this.bb.updateCurrents(currents);\n    }\n\n    /**\n     * Получить данные приложения\n     *\n     * @param {Array<Object>} plates плашки\n     */\n    getData() {\n        return this.bb.getData();\n    }\n\n    /**\n     * Задать обработчик события `изменены данные`\n     *\n     * @param {function} callback обработчик события `изменены данные`\n     */\n    onChange(callback) {\n        this._on_change_callback = callback;\n    }\n\n    /**\n     * Инициализировать модули\n     *\n     * Используется заданная ранее конфигурация модулей\n     *\n     * @private\n     */\n    _initModules() {\n        /// Модули\n\n        /** @type {BreadboardModule} модуль отображения макетной платы */\n        this.bb = new BreadboardModule({modeAdmin: true}); // Breadboard\n    }\n\n    /**\n     * Подписать диспетчер на события модулей\n     *\n     * @private\n     */\n    _subscribeToModules() {\n        this._dispatcher.subscribe(this.bb);\n    }\n\n    /**\n     * Определить цепочки-обработчики\n     *\n     * @private\n     */\n    _defineChains() {\n        $(document).ready(() => {\n            this.bb.inject(document.getElementById(this._container_id));\n        });\n\n        this._dispatcher.on(\"bb:change\", data => {\n            this._on_change_callback(data);\n        })\n    }\n}\n\nwindow.AdminBoardApplication = AdminBoardApplication;\n\nexport default AdminBoardApplication;\n",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/admin_board.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "AdminBoardApplication",
    "memberof": "js/admin_board.js",
    "static": true,
    "longname": "js/admin_board.js~AdminBoardApplication",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/admin_board.js",
    "importStyle": "AdminBoardApplication",
    "description": "Модуль \"Редактор платы\" административного интерфейса web-приложения \"Макетная плата\"\n\nЗадаёт взаимосвязи между событиями и функциями модулей.\nЗапускается в браузере администратора приложения.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#constructor",
    "access": "public",
    "description": "Создать экземпляр приложения",
    "lineNumber": 15
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_dispatcher",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#_dispatcher",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Dispatcher"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_config",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#_config",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "configure",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#configure",
    "access": "public",
    "description": "Преобразовать пользовательскую конфигурацию в настройки модулей\n\nКонфигурация, удобная для пользователя, преобразуется\nв конфигурацию, требуемую в отдельных модулях",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "пользовательская конфигурация"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_container_id",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#_container_id",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "run",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#run",
    "access": "public",
    "description": "Запустить приложение\n\nИнициализируются модули, выполняется подписка диспетчера на них",
    "lineNumber": 47,
    "params": [],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "setData",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#setData",
    "access": "public",
    "description": "Обновить данные приложения",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "plates",
        "description": "плашки"
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "currents",
        "description": "токи"
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getData",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#getData",
    "access": "public",
    "description": "Получить данные приложения",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "plates",
        "description": "плашки"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "onChange",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#onChange",
    "access": "public",
    "description": "Задать обработчик события `изменены данные`",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "обработчик события `изменены данные`"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "_on_change_callback",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#_on_change_callback",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "_initModules",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#_initModules",
    "access": "private",
    "description": "Инициализировать модули\n\nИспользуется заданная ранее конфигурация модулей",
    "lineNumber": 90,
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "bb",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#bb",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "BreadboardModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_subscribeToModules",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#_subscribeToModules",
    "access": "private",
    "description": "Подписать диспетчер на события модулей",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "_defineChains",
    "memberof": "js/admin_board.js~AdminBoardApplication",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/admin_board.js~AdminBoardApplication#_defineChains",
    "access": "private",
    "description": "Определить цепочки-обработчики",
    "lineNumber": 111,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "js/core/Dispatcher.js",
    "content": "const ERROR_EVENT_NAME = 'error';\n\n/**\n * Диспетчер - менеджер суррогатных событий.\n * Каждое приложение обладает единственным диспетчером.\n * Диспетчер не знает о существовании приложения, но знает о модулях.\n *\n * Задача диспетчера - сообщить приложение с модулями, вызывая обработчики суррогатных событий в приложении\n * для обработки событий в модулях. В качестве обработчиков выступают цепочки обещаний.\n *\n * С помощью диспетчера можно управлять прослушиванием событий: включать или отключать подмножества типов событий\n * в различных ситуациях.\n */\nexport default class Dispatcher {\n    /**\n     * Создать экземпляр диспетчера.\n     */\n    constructor() {\n        /** @type {Array<Module>} экземпляры прослушиваемых модулей */\n        this._modules = [];\n\n        /** @type {boolean} готовность модуля генерировать события */\n        this._handler_ready = undefined;\n\n        /** @type {Object} обработчики событий */\n        this._handlers = {};\n\n        /**\n         * @type {{always: Set, current: Set}} прослушиваемые типы событий: постоянные и текущие\n         */\n        this._event_types_listening = {\n            always: new Set(),\n            current: new Set()\n        };\n\n        /** @type {boolean} события заблокированы */\n        this._denied = false;\n        /** @type {Array<string>} искючения при блокировке */\n        this._deny_excepts = [];\n        /** @type {Set} все зарегистрированные типы событий */\n        this._event_types = new Set();\n    }\n\n    /**\n     * Подписать диспетчер на события модуля\n     *\n     * Тестируемое поведение:\n     *     - Тип события добавляется в список прослушиваемых типов событий\n     *     - Обработчики событий модуля будут вызывать метод, вызывающий локальный обработчик соответствующего\n     *       суррогатного события\n     *\n     * События модуля будут обрабатываться подключёнными к нему обработчиками суррогатных событий\n     * по имени `краткое_имя_модуля:имя_события` (см. метод {@link on})\n     *\n     * Событие `краткое_имя_модуля:ERROR_EVENT_NAME` переданного модуля\n     * автоматически заносится в список прослушиваемых\n     *\n     * @param {Module} module экземпляр модуля, на события которого требуется подписка\n     */\n    subscribe(module) {\n        let self = this;\n\n        let event_types = module.event_types;\n        let module_prefix = module.eventspace_name;\n\n        event_types.forEach((name, index) => {\n            let full_name = module_prefix + ':' + name;\n\n            module.attachEventListener(name, (data) => {\n                let fn = this._getHandler(full_name);\n                fn(data);\n            });\n\n            /// Добавить тип события в общий список\n            this._event_types.add(full_name);\n        });\n\n        this._modules.push(module);\n    }\n\n    /**\n     * Сообщить о готовности модуля вручную\n     *\n     * @param {Object} data данные, передаваемые обраотчику события `ready`\n     */\n    ready(data) {\n        if (this._handler_ready) {\n            this._handler_ready(data);\n        }\n    }\n\n    /**\n     * Установить обработчик события готовности модуля\n     *\n     * @param {function} handler обработчик события готовности модуля\n     */\n    onReady(handler) {\n        this._handler_ready = handler;\n    }\n\n    /**\n     * Установить обработчик суррогатного события\n     *\n     * События с именем name будут использовать функцию handler в качестве реакции\n     *\n     * Тестируемое поведение:\n     *     - Выбрасывает исключения при неверных аргументах\n     *     - Словарь обработчиков дополняется данным обработчиком с данным именем события\n     *     - При вызове функции с тем же именем события, но с другим обработчиком происходит переопределение\n     *\n     * @param {string}      name        имя типа суррогатного события в формате `краткое_имя_модуля:имя_события`\n     * @param {Function}    handler     функция-обработчик событий\n     */\n    on(name, handler) {\n        if (typeof name     !== 'string')    {throw new TypeError('Name is not a string!')}\n        if (typeof handler  !== 'function')  {throw new TypeError('Handler is not a function!')}\n\n        this._handlers[name] = handler;\n    }\n\n    /**\n     * Установить подмножество типов событий, которые будут обрабатываться всегда\n     *\n     * Тестируемое поведение:\n     *     - Выбрасывает исключение, если аргумент не является массивом\n     *     - Заданный массив преобразуется в развёрнутое подмножество событий, сохраняющееся в параметрах объекта\n     *\n     * Формат массива eventspace см. {@link getFilterByEventspace}\n     *\n     * @param {Array<string>} eventspace подмножество событий\n     */\n    always(eventspace) {\n        if (eventspace && !Array.isArray(eventspace))    {throw new TypeError ('Eventspace should be an array!')}\n\n        // this._event_types_listening.always.clear();\n\n        this._event_types_listening.always = new Set(\n            [...this._event_types].filter(Dispatcher.getFilterByEventspace(eventspace))\n        );\n    }\n\n    /**\n     * Прослушивать все типы событий\n     *\n     * Тестируемое поведение\n     *     - Функция должна заменить прослушиваемые типы событий на все возможные\n     */\n    all() {\n        this._event_types_listening.current = this._event_types;\n    }\n\n    /**\n     * Прослушивать только заданные типы событий\n     *\n     * @param eventspace {string} имя пространства событий\n     */\n    only(eventspace) {\n        return new Promise(resolve => {\n            if (eventspace && !Array.isArray(eventspace))    {throw new TypeError ('Eventspace should be an array!')}\n\n            this._event_types_listening.current.clear();\n\n            this._event_types_listening.current = new Set(\n                [...this._event_types].filter(Dispatcher.getFilterByEventspace(eventspace))\n            );\n\n            resolve();\n        });\n    }\n\n    /**\n     * Прослушивать все типы событий, кроме заданных\n     *\n     * TODO\n     * @param eventspace {string} имя пространства событий\n     */\n    aside(eventspace) {\n\n    }\n\n    /**\n     * TODO: tests\n     *\n     * @deprecated\n     */\n    allowAll() {\n        this._denied = false;\n\n        this._deny_excepts = new Set();\n    }\n\n    /**\n     * Запрет на прослушивание любого типа событий\n     *\n     * TODO: tests\n     *\n     * @deprecated\n     */\n    denyAll(eventspace_excepts) {\n        this._deny_excepts = new Set(\n            [...this._event_types].filter(Dispatcher.getFilterByEventspace(eventspace_excepts))\n        );\n\n        this._denied = true;\n    }\n\n    /**\n     * Выгрузить отладочные записи всех модулей в единый JSON-объект\n     *\n     * @param {boolean} flush очищать буфер после выгрузки\n     */\n    dumpLogs(flush) {\n        return new Promise(resolve => {\n           let logs = [];\n\n            for (module of this._modules) {\n                logs.push(module.getDebugBuffer(flush));\n            }\n\n            resolve(logs);\n        });\n    }\n\n    /**\n     * Вызвать событие вручную\n     *\n     * @param {string} name название события\n     * @param {Object} data данные события\n     */\n    call(name, data) {\n        this._getHandler(name)(data);\n    }\n\n    /**\n     * Возвратить функцию-обработчик суррогатного события типа name\n     *\n     * Тестируемое поведение:\n     *     - Если событие включено в список прослушиваемых, возвращаемая функция вызывает его обработчик\n     *     - Если события нет в списке прослушиваемых, возвращаемая функция выводит предупреждение\n     *     - При неправильном типе аргумента возвращаемая функция выбрасывает исключение с сообщением об ошибке\n     *\n     * @param   {string}    name          тип суррогатного события\n     *\n     * @returns {function}  функция-обработчик события / функция, выбрасывающая исключение\n     * @private\n     */\n    _getHandler(name) {\n        if (typeof name !== \"string\")\n            return function() {throw new TypeError(\"Dispatcher._getHandler(): Name is not a string!\")};\n\n        let allow = false;\n\n        if (this._denied) {\n            /// если включён запрет\n            if (this._deny_excepts.has(name)) {\n                /// если есть исключения\n                allow = true;\n            }\n        } else {\n            /// если выключен запрет\n            if (this._event_types_listening.always.has(name) || this._event_types_listening.current.has(name)) {\n                allow = true;\n            }\n        }\n\n        if (allow) {\n            if (name in this._handlers) {\n                return this._handlers[name];\n            } else {\n                return function(data) {console.warn(\"Dispatcher._getHandler(): handler for \", name, \" was not defined, data:\", data)};\n            }\n        } else {\n            return function(data) {console.warn(\"Dispatcher_getHandler(): Event listener \", name , \"was disabled for a while, data:\", data);}\n        }\n    }\n\n    /**\n     * Возвратить фильтр по маскам типов событий\n     *\n     * Массив eventspace может содержать как имена типов событий в развёрнутом виде, так и в виде маски.\n     *\n     * Правила:\n     *     - `module:event1`    означает тип события `event1` модуля `module`\n     *     - `module:*`         означает все события модуля `module`\n     *     - `*`                означает абсолютно все события\n     *\n     * Тестируемое поведение:\n     *     - Возвращаемая функция должна оставлять в фильтрующемся массиве только те элементы,\n     *       которые заданы с помощью строк, составленных по правилам, перечисленным выше,\n     *       в заданном массиве масок\n     *\n     * @param eventspace        массив масок типов событий\n     *\n     * @returns {function}      фильтр для массивов (см. функцию Array.filter())\n     */\n    static getFilterByEventspace(eventspace) {\n        return function(item) {\n            /// Если пространство событий содержит фильтрующий элемент\n            if (eventspace.includes(item)) {\n                return true;\n            }\n\n            /// Для всех элементов из заданного массива\n            for (let i = 0; i < eventspace.length; i++) {\n                /// Является ли групповым символом\n                let is_wildcard = (eventspace[i] === '*');\n                /// Имя модуля, если групповой символ стоит после двоеточия\n                let module_name = Dispatcher._isWildcardAfterColon(eventspace[i]);\n                /// Имя события, если групповой символ стоит до двоеточия\n                let event_name  = Dispatcher._isWildcardBeforeColon(eventspace[i]);\n\n                /// Если является групповым символом\n                if ((is_wildcard)) {\n                    return true;\n                }\n\n                /// Если групповой символ стоит после двоеточия и совпадает с именем модуля фильтрующего элемента\n                if ((module_name && (module_name === item.split(':')[0]))) {\n                    return true;\n                }\n\n                /// Если групповой символ стоит до двоеточия и совпадает с именем события фильтрующего элемента\n                if ((event_name && (event_name === item.split(':')[1]))) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    /**\n     * Проверить, содержит ли маска символ '*' после двоеточия\n     *\n     * Если символ есть, функция возвращает подстроку перед двоеточием\n     * Если символа нет, функция возвращает false\n     *\n     * @param   {string}            mask    исходная маска\n     *\n     * @returns {boolean|string}    соответствует ли маска требованию / подстрока перед двоеточием\n     * @private\n     */\n    static _isWildcardAfterColon(mask) {\n        if (typeof name !== \"string\")\n            throw new TypeError(\"Dispatcher._isWildcard(): mask in not a string\");\n\n        if (mask.split(':').length === 1) {\n            return false;\n        }\n\n        if (mask.split(':')[1] === \"*\") {\n            return mask.split(':')[0];\n        }\n    }\n\n    /**\n     * Проверить, содержит ли маска символ '*' перед двоеточием\n     *\n     * Если символ есть, функция возвращает подстроку после двоеточия\n     * Если символа нет, функция возвращает false\n     *\n     * @param   {string}            mask    исходная маска\n     *\n     * @returns {boolean|string}    соответствует ли маска требованию / подстрока после двоеточия\n     * @private\n     */\n    static _isWildcardBeforeColon(mask) {\n        if (typeof name !== \"string\")\n            throw new TypeError(\"Dispatcher._isWildcard(): mask in not a string\");\n\n        if (mask.split(':').length === 1) {\n            return false;\n        }\n\n        if (mask.split(':')[0] === \"*\") {\n            return mask.split(':')[1];\n        }\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/core/Dispatcher.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "ERROR_EVENT_NAME",
    "memberof": "js/core/Dispatcher.js",
    "static": true,
    "longname": "js/core/Dispatcher.js~ERROR_EVENT_NAME",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/core/Dispatcher.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "Dispatcher",
    "memberof": "js/core/Dispatcher.js",
    "static": true,
    "longname": "js/core/Dispatcher.js~Dispatcher",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/core/Dispatcher.js",
    "importStyle": "Dispatcher",
    "description": "Диспетчер - менеджер суррогатных событий.\nКаждое приложение обладает единственным диспетчером.\nДиспетчер не знает о существовании приложения, но знает о модулях.\n\nЗадача диспетчера - сообщить приложение с модулями, вызывая обработчики суррогатных событий в приложении\nдля обработки событий в модулях. В качестве обработчиков выступают цепочки обещаний.\n\nС помощью диспетчера можно управлять прослушиванием событий: включать или отключать подмножества типов событий\nв различных ситуациях.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 90,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#constructor",
    "access": "public",
    "description": "Создать экземпляр диспетчера.",
    "lineNumber": 18
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "_modules",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_modules",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Array<Module>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "_handler_ready",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_handler_ready",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "_handlers",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_handlers",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "_event_types_listening",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_event_types_listening",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "{always: Set, current: Set}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_denied",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_denied",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "_deny_excepts",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_deny_excepts",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "_event_types",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_event_types",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "subscribe",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#subscribe",
    "access": "public",
    "description": "Подписать диспетчер на события модуля\n\nТестируемое поведение:\n    - Тип события добавляется в список прослушиваемых типов событий\n    - Обработчики событий модуля будут вызывать метод, вызывающий локальный обработчик соответствующего\n      суррогатного события\n\nСобытия модуля будут обрабатываться подключёнными к нему обработчиками суррогатных событий\nпо имени `краткое_имя_модуля:имя_события` (см. метод {@link on})\n\nСобытие `краткое_имя_модуля:ERROR_EVENT_NAME` переданного модуля\nавтоматически заносится в список прослушиваемых",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Module"
        ],
        "spread": false,
        "optional": false,
        "name": "module",
        "description": "экземпляр модуля, на события которого требуется подписка"
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "ready",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#ready",
    "access": "public",
    "description": "Сообщить о готовности модуля вручную",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "данные, передаваемые обраотчику события `ready`"
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "onReady",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#onReady",
    "access": "public",
    "description": "Установить обработчик события готовности модуля",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "обработчик события готовности модуля"
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "on",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#on",
    "access": "public",
    "description": "Установить обработчик суррогатного события\n\nСобытия с именем name будут использовать функцию handler в качестве реакции\n\nТестируемое поведение:\n    - Выбрасывает исключения при неверных аргументах\n    - Словарь обработчиков дополняется данным обработчиком с данным именем события\n    - При вызове функции с тем же именем события, но с другим обработчиком происходит переопределение",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "имя типа суррогатного события в формате `краткое_имя_модуля:имя_события`"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "функция-обработчик событий"
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "always",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#always",
    "access": "public",
    "description": "Установить подмножество типов событий, которые будут обрабатываться всегда\n\nТестируемое поведение:\n    - Выбрасывает исключение, если аргумент не является массивом\n    - Заданный массив преобразуется в развёрнутое подмножество событий, сохраняющееся в параметрах объекта\n\nФормат массива eventspace см. {@link getFilterByEventspace}",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "eventspace",
        "description": "подмножество событий"
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "all",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#all",
    "access": "public",
    "description": "Прослушивать все типы событий\n\nТестируемое поведение\n    - Функция должна заменить прослушиваемые типы событий на все возможные",
    "lineNumber": 148,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "only",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#only",
    "access": "public",
    "description": "Прослушивать только заданные типы событий",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eventspace",
        "description": "{string} имя пространства событий"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "aside",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#aside",
    "access": "public",
    "description": "Прослушивать все типы событий, кроме заданных\n\nTODO",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eventspace",
        "description": "{string} имя пространства событий"
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "allowAll",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#allowAll",
    "access": "public",
    "description": "TODO: tests",
    "lineNumber": 186,
    "deprecated": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "denyAll",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#denyAll",
    "access": "public",
    "description": "Запрет на прослушивание любого типа событий\n\nTODO: tests",
    "lineNumber": 199,
    "deprecated": true,
    "params": [
      {
        "name": "eventspace_excepts",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "dumpLogs",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#dumpLogs",
    "access": "public",
    "description": "Выгрузить отладочные записи всех модулей в единый JSON-объект",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flush",
        "description": "очищать буфер после выгрузки"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "call",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#call",
    "access": "public",
    "description": "Вызвать событие вручную",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "название события"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "данные события"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "_getHandler",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Dispatcher.js~Dispatcher#_getHandler",
    "access": "private",
    "description": "Возвратить функцию-обработчик суррогатного события типа name\n\nТестируемое поведение:\n    - Если событие включено в список прослушиваемых, возвращаемая функция вызывает его обработчик\n    - Если события нет в списке прослушиваемых, возвращаемая функция выводит предупреждение\n    - При неправильном типе аргумента возвращаемая функция выбрасывает исключение с сообщением об ошибке",
    "lineNumber": 247,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}  функция-обработчик события / функция, выбрасывающая исключение"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "тип суррогатного события"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "функция-обработчик события / функция, выбрасывающая исключение"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "getFilterByEventspace",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/core/Dispatcher.js~Dispatcher.getFilterByEventspace",
    "access": "public",
    "description": "Возвратить фильтр по маскам типов событий\n\nМассив eventspace может содержать как имена типов событий в развёрнутом виде, так и в виде маски.\n\nПравила:\n    - `module:event1`    означает тип события `event1` модуля `module`\n    - `module:*`         означает все события модуля `module`\n    - `*`                означает абсолютно все события\n\nТестируемое поведение:\n    - Возвращаемая функция должна оставлять в фильтрующемся массиве только те элементы,\n      которые заданы с помощью строк, составленных по правилам, перечисленным выше,\n      в заданном массиве масок",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function}      фильтр для массивов (см. функцию Array.filter())"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eventspace",
        "description": "массив масок типов событий"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": "фильтр для массивов (см. функцию Array.filter())"
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "_isWildcardAfterColon",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/core/Dispatcher.js~Dispatcher._isWildcardAfterColon",
    "access": "private",
    "description": "Проверить, содержит ли маска символ '*' после двоеточия\n\nЕсли символ есть, функция возвращает подстроку перед двоеточием\nЕсли символа нет, функция возвращает false",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|string}    соответствует ли маска требованию / подстрока перед двоеточием"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "исходная маска"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string"
      ],
      "spread": false,
      "description": "соответствует ли маска требованию / подстрока перед двоеточием"
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "_isWildcardBeforeColon",
    "memberof": "js/core/Dispatcher.js~Dispatcher",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/core/Dispatcher.js~Dispatcher._isWildcardBeforeColon",
    "access": "private",
    "description": "Проверить, содержит ли маска символ '*' перед двоеточием\n\nЕсли символ есть, функция возвращает подстроку после двоеточия\nЕсли символа нет, функция возвращает false",
    "lineNumber": 365,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|string}    соответствует ли маска требованию / подстрока после двоеточия"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mask",
        "description": "исходная маска"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "string"
      ],
      "spread": false,
      "description": "соответствует ли маска требованию / подстрока после двоеточия"
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "js/core/Loggable.js",
    "content": "/**\n * Класс для создания логируемых объектов\n *\n * Любой логируемый объект может работать в двух режимах:\n *      - Логирование в консоль\n *      - Логирование в буфер\n *\n * При логировании в консоль происходит стандартное перенаправление к стандартным функцям отладки `console.*`\n * При логировании в буфер стандартные функции отладки не вызываются; результаты сохраняются в буфер JSON-объектов,\n * содержимое которого можно получить с помощью метода getDebugBuffer()\n */\nexport default class Loggable {\n    /**\n     * Создать экземпляр логируемого объекта\n     *\n     * Препдполагается, что метод будет вызван в конструкторе логируемого объекта\n     *\n     * @param options {{logging: Object}}\n     */\n    constructor(options) {\n        /** @type {Object} опции логирования */\n        let logOptions = options.logging || {};\n\n        /** @type {boolean} работать локально */\n        let local = logOptions.local || false;\n\n        /** @type {Array<{module: string, type: string, data: string}>} отладочный буфер */\n        this._debug_buffer = [];\n\n        /** @type {Object} функции отладки */\n        this._debug = {};\n\n        if (local) {\n            this._bindConsole();\n        } else {\n            this._bindBuffer();\n        }\n    }\n\n    /**\n     * Получить содержимое отладочного буфера\n     *\n     * @param   {boolean} flush очистить ли буфер перед возвращением\n     * @returns {Array}         буфер отладочных JSON-объектов\n     */\n    getDebugBuffer(flush = true) {\n        if (flush) {\n            let buf = this._debug_buffer;\n            this._debug_buffer = [];\n\n            return buf;\n        }\n\n        return this._debug_buffer;\n    }\n\n//private:\n\n    /**\n     * Привязать стандартные функции логирования `console.*`\n     *\n     * Привязать в качестве набора отладочных методов стандартные функции `console.*`\n     *\n     * @private\n     */\n    _bindConsole() {\n        for (let cfn in window.console) {\n            if (typeof console[cfn].bind !== \"undefined\") {\n                this._debug[cfn] = window.console[cfn].bind(window.console, \"[\" + this.constructor.name + \"]\");\n            }\n        }\n    }\n\n    /**\n     * Привязать функции логирования в буфер\n     *\n     * Привязать в качестве набора отладочных методов функции логирования в буфер.\n     * Наименования отладочных методов аналогичны набору console.*\n     *\n     * @private\n     */\n    _bindBuffer() {\n        for (let cfn in window.console) {\n            this._debug[cfn] = () => {\n                let debug_item = JSON.stringify(arguments);\n\n                /// Запись в буфер\n                this._debug_buffer.push({\n                    module: this.constructor.name,\n                    type:   cfn,\n                    data:   debug_item\n                });\n\n                /// Стандартное логирование\n                window.console[cfn].bind(window.console, \"[\" + this.constructor.name + \"]\")();\n            }\n        }\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/core/Loggable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Loggable",
    "memberof": "js/core/Loggable.js",
    "static": true,
    "longname": "js/core/Loggable.js~Loggable",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/core/Loggable.js",
    "importStyle": "Loggable",
    "description": "Класс для создания логируемых объектов\n\nЛюбой логируемый объект может работать в двух режимах:\n     - Логирование в консоль\n     - Логирование в буфер\n\nПри логировании в консоль происходит стандартное перенаправление к стандартным функцям отладки `console.*`\nПри логировании в буфер стандартные функции отладки не вызываются; результаты сохраняются в буфер JSON-объектов,\nсодержимое которого можно получить с помощью метода getDebugBuffer()",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/core/Loggable.js~Loggable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Loggable.js~Loggable#constructor",
    "access": "public",
    "description": "Создать экземпляр логируемого объекта\n\nПрепдполагается, что метод будет вызван в конструкторе логируемого объекта",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "{{logging: Object}}"
      }
    ]
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "_debug_buffer",
    "memberof": "js/core/Loggable.js~Loggable",
    "static": false,
    "longname": "js/core/Loggable.js~Loggable#_debug_buffer",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Array<{module: string, type: string, data: string}>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "_debug",
    "memberof": "js/core/Loggable.js~Loggable",
    "static": false,
    "longname": "js/core/Loggable.js~Loggable#_debug",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getDebugBuffer",
    "memberof": "js/core/Loggable.js~Loggable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Loggable.js~Loggable#getDebugBuffer",
    "access": "public",
    "description": "Получить содержимое отладочного буфера",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}         буфер отладочных JSON-объектов"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flush",
        "description": "очистить ли буфер перед возвращением"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "буфер отладочных JSON-объектов"
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "_bindConsole",
    "memberof": "js/core/Loggable.js~Loggable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Loggable.js~Loggable#_bindConsole",
    "access": "private",
    "description": "Привязать стандартные функции логирования `console.*`\n\nПривязать в качестве набора отладочных методов стандартные функции `console.*`",
    "lineNumber": 66,
    "params": [],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "_bindBuffer",
    "memberof": "js/core/Loggable.js~Loggable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Loggable.js~Loggable#_bindBuffer",
    "access": "private",
    "description": "Привязать функции логирования в буфер\n\nПривязать в качестве набора отладочных методов функции логирования в буфер.\nНаименования отладочных методов аналогичны набору console.*",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "js/core/Module.js",
    "content": "import Loggable from './Loggable';\n\n/**\n * Модули - независимые компоненты приложений.\n * Модули самостоятельны, не знают о существовании приложений и других модулей.\n * Модули не обязательно могут использоваться только приложениями (например, когда состоят из статических методов)\n *\n * Каждый модуль задаёт своё подпространство событий, обладающее своим именем.\n *\n * Задача модуля - предоставить использующему набор методов, которые можно вызывать единично\n * (как команду, без циклов/условий и т.д.).\n *\n * Каждый модуль агрегирует набор функциональностей одного рода. Например:\n *      - Коммуникация\n *      - Рабочая область\n *      - Логирование\n *      - Кэширование настроек среды\n *\n * Модули могут использовать вспомогательные обёртки (см. Wrapper) для реализации функциональностей.\n *\n * Классы-обёртки должны наследоваться от класса Module.\n * Имена классов-модулей именуются в стиле CamelCase с постфиксом Module.\n * Каждый класс должен быть расположен в отдельном одноимённом файле.\n */\nexport default class Module extends Loggable {\n// public:\n\n    /**\n     * @abstract\n     *\n     * @type {string} имя пространства событий\n     */\n    static get eventspace_name() {throw new TypeError(\"This method should be overridden by inheriting classes\")}\n\n    /**\n     * @abstract\n     *\n     * @type {Array} массив типов событий\n     */\n    static get event_types()     {throw new TypeError(\"This method should be overridden by inheriting classes\")}\n\n    /**\n     * Установить опции по умолчанию\n     *\n     * Метод должен возвращать объект, в котором ключи означают\n     * настройки, а значения - их опции по умолчанию\n     *\n     * Вызывается конструкторами классов-наслдеников\n     * Заданные настройки и опции по умолчанию используются впоследствии методом _coverOptions(),\n     * передающим опции из конструктора во внутренний атрибут объекта this._options\n     *\n     * @abstract\n     */\n    static defaults() {\n        // throw new TypeError(\"_setDefaults() should be overridden by inherited classes\");\n        return {};\n    }\n\n    /**\n     * Создать экземпляр модуля\n     *\n     * После этой операции диспетчер можно подписывать на события этого модуля\n     *\n     * @param {Object} options опции модуля в формате, задаваемом в методе {@link defaults}\n     */\n    constructor(options) {\n        options = options || {};\n        super(options);\n\n        /// Загрузить опции по умолчанию, перекрыть их кастомными опциями\n        /** @type {Object} опции модуля по умолчанию */\n        this.__defaults = this.constructor.defaults();\n        /** @type {Object} обработанные опции модуля */\n        this._options   = this._coverOptions(this.__defaults, options);\n\n        /** @type {string} имя пространства событий модуля */\n        this.eventspace_name    = this.constructor.eventspace_name;\n        /** @type {Array} типы событий модуля */\n        this.event_types        = this.constructor.event_types;\n\n        /** @type {Object} обработчики событий модуля */\n        this._event_listeners = {};\n    }\n\n    /**\n     * Подключить обработчик событий типа name\n     *\n     * Вызывается диспетчером.\n     * Устанавливает в качестве обработчика событий типа name функцию handler.\n     *\n     * Если обработчик ещё не был создан, после вызова этой функции последующее создание обработчика\n     * не перезапишет имеющийся, если не выбран строгий режим (см. Module._createEventListener())\n     *\n     * @param {string}      name    имя типа событий\n     * @param {Function}    handler функция-обработчик типа событий name\n     */\n    attachEventListener(name, handler) {\n        if (name    === undefined) {console.error('Attaching listener with undefined name is not correct!')}\n        if (handler === undefined) {console.error('Attaching listener with undefined handler is not correct!')}\n        if (typeof name     !== 'string')    {console.error('Name is not a string!')}\n        if (typeof handler  !== 'function')  {console.error('Handler is not a function!')}\n\n        this._event_listeners[name] = handler;\n    }\n\n    /**\n     * Инициировать событие типа name\n     *\n     * Метод не является асинхронным.\n     * При вызове из модуля блокируется на время выполнения\n     * кода обработчика события\n     *\n     * @param {string} name имя типа события\n     * @param {Object} data данные события\n     */\n    emitEvent(name, data) {\n        this._getEventListener(name)(data);\n    }\n\n// private:\n\n    /**\n     * Создать пустой обработчик событий типа name\n     *\n     * Пустой обработчик событий - функция, выводящая информацию о том, что обработчик ни к кому не подключён\n     *\n     * @param {string} name     имя типа событий\n     * @param {bool}   strict   перезаписывать ли установленный ранее обработчик (строгий режим)\n     * @private\n     */\n    _createEventListener(name, strict = false) {\n        if (!this.event_types.includes(name)) {\n            throw new RangeError(\"This event type name was not registered in the module's event_types() getter\");\n        }\n\n        if (this._event_listeners[name] === undefined || strict) {\n            this._event_listeners[name] = function (data) {\n                console.warn(\"Unattached listener `\" + name + \"` called with data\", data,\n                    \"(did you subscribe dispatcher to this module?)\");\n            };\n        }\n    }\n\n    /**\n     * Возвратить функцию-обработчик типа событий name\n     *\n     * Вызывается классами-наледниками в методе _subscribeToWrapperEvents()\n     *\n     * @param   {string}      name   имя типа событий\n     * @returns {Function}           функция-обработчик типа событий name\n     * @private\n     */\n    _getEventListener(name) {\n        if (!this.event_types.includes(name)) {\n            throw new RangeError(\"This event type name was not registered in the module's event_types() getter\");\n        }\n\n        if (this._event_listeners[name] === undefined) {\n            this._createEventListener(name);\n        }\n\n        return this._event_listeners[name];\n    }\n\n    /**\n     * Подписаться на события обработчиков\n     *\n     * Вызывается конструкторами классов-наследников.\n     * Создаёт типы событий путём задания в классах-наследниках обработчиков\n     *\n     * Виртуальный метод: его должен реализовать каждый наследник.\n     *\n     * @abstract\n     * @private\n     */\n    _subscribeToWrapperEvents() {\n        throw new TypeError(\"_subscribeToWrapperEvents() should be overridden by inherited classes\");\n    }\n\n    /**\n     * Наложить заданные опции поверх опций по умолчанию и сохранить в объект\n     * в соответствии с настройками, заданными в defaults()\n     *\n     * TODO: критическая функция, нужно покрывать тестами\n     *\n     * @private\n     */\n    _coverOptions(defaults, options) {\n        /// Если не заданы настройки с опциями по умолчанию - выдать пустой объект\n        if (typeof defaults === \"undefined\") return {};\n        /// Если не заданы опции - выдать опции по умолчанию\n        if (typeof options === \"undefined\") return defaults;\n        /// Если настроек нет - выдать пустой объект\n        // if (Object.keys(defaults).length === 0) return 'undefined';\n\n        /// Если options - не объект, то возвратить значение\n        if (typeof options !== 'object') return options;\n\n        let settings = {};\n\n        /// Для каждой заданной опции выполнить рекурсивно поиск опции\n        for (let setting of Object.keys(defaults)) {\n            settings[setting] = this._coverOptions(defaults[setting], options[setting]);\n        }\n\n        return settings;\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/core/Module.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "Module",
    "memberof": "js/core/Module.js",
    "static": true,
    "longname": "js/core/Module.js~Module",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/core/Module.js",
    "importStyle": "Module",
    "description": "Модули - независимые компоненты приложений.\nМодули самостоятельны, не знают о существовании приложений и других модулей.\nМодули не обязательно могут использоваться только приложениями (например, когда состоят из статических методов)\n\nКаждый модуль задаёт своё подпространство событий, обладающее своим именем.\n\nЗадача модуля - предоставить использующему набор методов, которые можно вызывать единично\n(как команду, без циклов/условий и т.д.).\n\nКаждый модуль агрегирует набор функциональностей одного рода. Например:\n     - Коммуникация\n     - Рабочая область\n     - Логирование\n     - Кэширование настроек среды\n\nМодули могут использовать вспомогательные обёртки (см. Wrapper) для реализации функциональностей.\n\nКлассы-обёртки должны наследоваться от класса Module.\nИмена классов-модулей именуются в стиле CamelCase с постфиксом Module.\nКаждый класс должен быть расположен в отдельном одноимённом файле.",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "js/core/Loggable.js~Loggable"
    ]
  },
  {
    "__docId__": 130,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/core/Module.js~Module.eventspace_name",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 131,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/core/Module.js~Module.event_types",
    "access": "public",
    "description": "",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "abstract": true
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/core/Module.js~Module.defaults",
    "access": "public",
    "description": "Установить опции по умолчанию\n\nМетод должен возвращать объект, в котором ключи означают\nнастройки, а значения - их опции по умолчанию\n\nВызывается конструкторами классов-наслдеников\nЗаданные настройки и опции по умолчанию используются впоследствии методом _coverOptions(),\nпередающим опции из конструктора во внутренний атрибут объекта this._options",
    "lineNumber": 54,
    "abstract": true,
    "params": [],
    "return": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Module.js~Module#constructor",
    "access": "public",
    "description": "Создать экземпляр модуля\n\nПосле этой операции диспетчер можно подписывать на события этого модуля",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "опции модуля в формате, задаваемом в методе {@link defaults}"
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "__defaults",
    "memberof": "js/core/Module.js~Module",
    "static": false,
    "longname": "js/core/Module.js~Module#__defaults",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "_options",
    "memberof": "js/core/Module.js~Module",
    "static": false,
    "longname": "js/core/Module.js~Module#_options",
    "access": "private",
    "description": null,
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "eventspace_name",
    "memberof": "js/core/Module.js~Module",
    "static": false,
    "longname": "js/core/Module.js~Module#eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "event_types",
    "memberof": "js/core/Module.js~Module",
    "static": false,
    "longname": "js/core/Module.js~Module#event_types",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "_event_listeners",
    "memberof": "js/core/Module.js~Module",
    "static": false,
    "longname": "js/core/Module.js~Module#_event_listeners",
    "access": "private",
    "description": null,
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "attachEventListener",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Module.js~Module#attachEventListener",
    "access": "public",
    "description": "Подключить обработчик событий типа name\n\nВызывается диспетчером.\nУстанавливает в качестве обработчика событий типа name функцию handler.\n\nЕсли обработчик ещё не был создан, после вызова этой функции последующее создание обработчика\nне перезапишет имеющийся, если не выбран строгий режим (см. Module._createEventListener())",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "имя типа событий"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "функция-обработчик типа событий name"
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "emitEvent",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Module.js~Module#emitEvent",
    "access": "public",
    "description": "Инициировать событие типа name\n\nМетод не является асинхронным.\nПри вызове из модуля блокируется на время выполнения\nкода обработчика события",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "имя типа события"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "данные события"
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "_createEventListener",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Module.js~Module#_createEventListener",
    "access": "private",
    "description": "Создать пустой обработчик событий типа name\n\nПустой обработчик событий - функция, выводящая информацию о том, что обработчик ни к кому не подключён",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "имя типа событий"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "strict",
        "description": "перезаписывать ли установленный ранее обработчик (строгий режим)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "_getEventListener",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Module.js~Module#_getEventListener",
    "access": "private",
    "description": "Возвратить функцию-обработчик типа событий name\n\nВызывается классами-наледниками в методе _subscribeToWrapperEvents()",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}           функция-обработчик типа событий name"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "имя типа событий"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "функция-обработчик типа событий name"
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Module.js~Module#_subscribeToWrapperEvents",
    "access": "private",
    "description": "Подписаться на события обработчиков\n\nВызывается конструкторами классов-наследников.\nСоздаёт типы событий путём задания в классах-наследниках обработчиков\n\nВиртуальный метод: его должен реализовать каждый наследник.",
    "lineNumber": 176,
    "abstract": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "_coverOptions",
    "memberof": "js/core/Module.js~Module",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Module.js~Module#_coverOptions",
    "access": "private",
    "description": "Наложить заданные опции поверх опций по умолчанию и сохранить в объект\nв соответствии с настройками, заданными в defaults()\n\nTODO: критическая функция, нужно покрывать тестами",
    "lineNumber": 188,
    "params": [
      {
        "name": "defaults",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "js/core/Wrapper.js",
    "content": "import Loggable from './Loggable';\n\n/**\n * Обёртки - зависимые компоненты модулей.\n *\n * Обёртки могут существовать только в составе модулей (см. {@link Module}).\n * Обёртки не знают о существовании модулей и приложений.\n * Методы обёртки могут быть реализованы с помощью одной или нескольких библиотек схожего назначения.\n *\n * Задача обёртки - абстрагировать остальной код от конкретной библиотеки (набора бибилотек). Например:\n *      - GUI языка программирования Blockly\n *      - Сокет-клиент\n *      - Веб-клиент\n *      - Специфический визуальный компонент \"гирлянда\"\n *      - Система всплывающих окон\n *\n * Обёртка должна использовать класс Promise при необходимости выполнения синхронного кода.\n *\n * Классы-обёртки должны наследоваться от класса {@link Wrapper}.\n * Имена классов-обёрток именуются в стиле CamelCase с постфиксом `Wrapper`.\n * Каждый класс должен быть расположен в отдельном одноимённом файле.\n *\n * Например:\n *\n * `BlocklyWrapper.js`,\n * `BreadboardWrapper.js`\n */\nexport default class Wrapper extends Loggable {\n    /**\n     * Создать экземпляр обёртки\n     *\n     * @param {Object} options опции обёртки в произвольном формате\n     */\n    constructor(options) {\n        options = options || {};\n        super(options);\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/core/Wrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "Wrapper",
    "memberof": "js/core/Wrapper.js",
    "static": true,
    "longname": "js/core/Wrapper.js~Wrapper",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/core/Wrapper.js",
    "importStyle": "Wrapper",
    "description": "Обёртки - зависимые компоненты модулей.\n\nОбёртки могут существовать только в составе модулей (см. {@link Module}).\nОбёртки не знают о существовании модулей и приложений.\nМетоды обёртки могут быть реализованы с помощью одной или нескольких библиотек схожего назначения.\n\nЗадача обёртки - абстрагировать остальной код от конкретной библиотеки (набора бибилотек). Например:\n     - GUI языка программирования Blockly\n     - Сокет-клиент\n     - Веб-клиент\n     - Специфический визуальный компонент \"гирлянда\"\n     - Система всплывающих окон\n\nОбёртка должна использовать класс Promise при необходимости выполнения синхронного кода.\n\nКлассы-обёртки должны наследоваться от класса {@link Wrapper}.\nИмена классов-обёрток именуются в стиле CamelCase с постфиксом `Wrapper`.\nКаждый класс должен быть расположен в отдельном одноимённом файле.\n\nНапример:\n\n`BlocklyWrapper.js`,\n`BreadboardWrapper.js`",
    "lineNumber": 28,
    "interface": false,
    "extends": [
      "js/core/Loggable.js~Loggable"
    ]
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/core/Wrapper.js~Wrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/core/Wrapper.js~Wrapper#constructor",
    "access": "public",
    "description": "Создать экземпляр обёртки",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "опции обёртки в произвольном формате"
      }
    ]
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "js/index.js",
    "content": "import Dispatcher from \"./core/Dispatcher\";\n\nimport LogModule            from \"./modules/LogModule\";\nimport GUIModule            from \"./modules/GUIModule\";\nimport TracingModule        from \"./modules/TracingModule\";\nimport LayoutModule         from \"./modules/LayoutModule\";\nimport BreadboardModule     from \"./modules/BreadboardModule\";\nimport WorkspaceModule      from \"./modules/WorkspaceModule\";\nimport InstructorModule     from './modules/InstructorModule';\nimport LocalServiceModule   from \"./modules/LocalServiceModule\";\nimport GlobalServiceModule  from \"./modules/GlobalServiceModule\";\n\nconst BUTTON_CODES = [\n    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, // 0-9\n    81, 87, 69, 82, 84, 89,                 // QWERTY\n    65, 83, 68, 70, 71, 72,                 // ASDFGH\n    38, 40, 37, 39                          // arrows\n];\n\n/**\n * Пользовательский интерфейс клиентской стороны web-приложения \"Макетная плата\"\n *\n * Задаёт взаимосвязи между событиями и функциями модулей.\n * Запускается в браузере конечного пользователя.\n */\nclass Application {\n    /**\n     * Создать экземпляр приложения\n     */\n    constructor() {\n        /** @type {Dispatcher} диспетчер событий */\n        this._dispatcher = new Dispatcher();\n\n        /** @type {Object} общая конфигурация */\n        this._config = {};\n\n        this._defineChains();\n    }\n\n    /**\n     * Преобразовать пользовательскую конфигурацию в настройки модулей\n     *\n     * Конфигурация, удобная для пользователя, преобразуется\n     * в конфигурацию, требуемую в отдельных модулях\n     *\n     * @param {Object} config пользовательская конфигурация\n     */\n    configure(config) {\n        if (!config) {return true}\n\n        /** type {Object} конфигурации модулей */\n        this._config = {\n            gui: {\n                anyKey: config.anyKey,\n                logoText: config.logoText,\n                imagesPath: config.imagesPath,\n                devMode: config.showDebugInfo\n            },\n            lay: {\n\n            },\n            ins: {\n                lessonID: config.lessonID,\n                silent: config.noIntros,\n            },\n            trc: {\n\n            },\n            ws: {\n                allBlocks: config.allBlocks,\n            },\n            bb: {\n\n            },\n            gs: {\n                origin: config.origin,\n                csrfRequired: config.isInternal,\n                modeDummy:  config.offline\n            },\n            ls: {\n                modeDummy: config.isolated,\n                portUrgent: config.port\n            },\n            log: {\n                modeDummy: config.noRemoteLogs\n            }\n        };\n\n        for (let conf_item in this._config) {\n            this._config[conf_item].logging = {\n                local: config.noRemoteLogs\n            }\n        }\n    }\n\n    /**\n     * Запустить приложение\n     *\n     * Инициализируются модули, выполняется подписка диспетчера на них\n     */\n    run() {\n        this._initModules();\n        this._subscribeToModules();\n\n        this._dispatcher.only(['ls:connect']);\n        this._dispatcher.always([\n            '*:resize', '*:error',\n            'ins:start', 'ins:progress', 'ins:mission',\n            'ls:*', 'lay:*', 'log:*',\n            'gui:hash-command', 'gui:stop', 'gui:menu', 'gui:ready'\n        ]);\n    }\n\n    /**\n     * Инициализировать модули\n     *\n     * Используется заданная ранее конфигурация модулей\n     *\n     * @private\n     */\n    _initModules() {\n        /// Модули\n\n        /** @type {LogModule} */\n        this.log    = new LogModule(this._config.log);\n        /** @type {GUIModule} модуль графического интерфейса */\n        this.gui    = new GUIModule(this._config.gui);\n        /** @type {TracingModule} модуль трассировки кода */\n        this.trc    = new TracingModule(this._config.trc);\n        /** @type {LayoutModule} модуль разметки страницы */\n        this.lay    = new LayoutModule(this._config.lay);\n        /** @type {WorkspaceModule} модуль рабочей области */\n        this.ws     = new WorkspaceModule(this._config.ws);\n        /** @type {BreadboardModule} модуль отображения макетной платы */\n        this.bb     = new BreadboardModule(this._config.bb);\n        /** @type {InstructorModule} модуль управления прогрессом и выдачи подсказок */\n        this.ins    = new InstructorModule(this._config.ins);\n        /** @type {LocalServiceModule} модуль локального сервиса */\n        this.ls     = new LocalServiceModule(this._config.ls);\n        /** @type {GlobalServiceModule} модуль глобального сервиса */\n        this.gs     = new GlobalServiceModule(this._config.gs);\n\n        this.gui.registerButtonCodes(BUTTON_CODES);\n    }\n\n    /**\n     * Подписать диспетчер на события модулей\n     *\n     * @private\n     */\n    _subscribeToModules() {\n        this._dispatcher.subscribe(this.log);\n        this._dispatcher.subscribe(this.gui);\n        this._dispatcher.subscribe(this.ins);\n        this._dispatcher.subscribe(this.lay);\n        this._dispatcher.subscribe(this.ws);\n        this._dispatcher.subscribe(this.ls);\n        this._dispatcher.subscribe(this.gs);\n\n        this._dispatcher.ready();\n    }\n\n    /**\n     * Определить цепочки-обработчики\n     *\n     * @private\n     */\n    _defineChains() {\n        /**\n         * Готовность диспетчера к работе\n         */\n        this._dispatcher.onReady(() => {\n            let exercise_idx, mission_idx;\n\n            let command = this.gui._checkURLHashCommand();\n            if (command.type === \"goto\") {\n                exercise_idx = command.data.exerciseIDX;\n                mission_idx = command.data.missionIDX;\n            }\n\n            this.ins.getInitialLessonID()\n                .then(lesson_id => this.gs.getLessonData(lesson_id))\n                .then(lesson_data => this.ins.loadLesson(lesson_data))\n                .then(lesson => {\n                    this.gui.showMissionButtons(lesson.missions);\n                    this.gui.setCourseText(lesson.name)\n                })\n                .then(() => this.ins.launchLesson(mission_idx, exercise_idx))\n                .catch(error => {\n                    this.gui.showSpinnerError(error.message);\n                    console.error(error);\n                });\n        });\n\n        /**\n         * Запущено упражнение\n         */\n        this._dispatcher.on('ins:start', exercise => {\n            console.log(exercise);\n\n            /// Заблокировать все события\n            this._dispatcher.only([]);\n\n            this.gui.setExerciseCurrent(exercise.exerciseIDX);\n\n            /// Скомпоновать разметку, убрать спиннер и разблокировать события GUI\n            this.lay.compose(exercise.layout_mode)\n                .then(() => this.ls.setMode(exercise.board_mode))\n                .then(() => this.ws.loadProgram(exercise.missionIDX, exercise.exerciseIDX))\n                .then(() => this.ws.setMaxBlockLimit(exercise.max_blocks))\n                .then(() => this.ws.setEditable(exercise.editable))\n                .then(() => this.gui.setLaunchVariant(exercise.launch_variant))\n                .then(() => this.gui.showTask(exercise.task_description))\n                .then(() => this.ws.setBlockTypes(exercise.block_types))\n                .then(() => this.trc.registerVariables(exercise.variables))\n                .then(() => this.lay.switchButtonsPane(exercise.display_buttons))\n                .then(() => this.gui.hideSpinner())\n                .then(() => this.ins.tourIntro(exercise.popovers))\n                .then(() => this.trc.clearButtons())\n                .then(() => this.gui.listenButtons(exercise.check_buttons))\n                .then(() => this.ins.setButtonsModel(exercise.buttons_model))\n                .then(() => {\n                    if (exercise.check_buttons) {\n                        this._dispatcher.only(['gui:*', 'ins:pass']);\n                    } else {\n                        this._dispatcher.only(['gui:*']);\n                    }\n                })\n        });\n\n        /**\n         * Нажата кнопка \"Задание №\"\n         */\n        this._dispatcher.on('gui:mission', mission_idx => {\n            this.ins.launchMission(mission_idx);\n        });\n\n        this._dispatcher.on('ins:mission', mission_idx => {\n            this.gui.setMissionCurrent(mission_idx);\n        });\n\n        this._dispatcher.on('gui:ready', () => {\n            // setTimeout(() => {\n            //     let status = this.ls.getBoardStatus();\n            //\n            //     if (status) {\n            //         this.gui.setBoardStatus(status);\n            //     }\n            // }, 5000);\n        });\n\n        /**\n         * Нажата кнопка \"Проверить\"\n         */\n        this._dispatcher.on('gui:check', () => {\n            /// прослушивать только события прохождения или провала\n            this._dispatcher.only([\"ins:pass\", \"ins:fault\"]);\n\n            /// определить ИД упражнения\n            let exID = this.ins.getExerciseID();\n            /// зажать кнопку\n            this.gui.affirmLaunchButtonState('check', false);\n            /// очистить ошибочные блоки\n            this.ws.clearErrorBlocks();\n\n            /// получить обработчики\n            Promise.all([\n                this.ws.getAllHandlers(),\n                this.bb.getData()\n            ])\n                .then(results   => {return {handlers: results[0], board: results[1]}})\n                .then(data      => this.gs.commitSolution(exID, data))\n                .then(verdict   => this.ins.applyVerdict(verdict))\n                .then(()        => this.gui.affirmLaunchButtonState('check', true))\n                .then(()        => {\n                    this.gui.affirmLaunchButtonState('check', true);\n                    this._dispatcher.only(['gui:*', 'ins:*']);\n                })\n                .catch((err)    => {\n                    console.error(err);\n                    this.gui.affirmLaunchButtonState('check', true);\n                    this._dispatcher.only(['gui:*', 'ins:*'])\n                });\n        });\n\n        /**\n         * Нажата кнопка \"Запустить\"\n         */\n        this._dispatcher.on('gui:run', () => {\n            this._dispatcher.only([\"gui:stop\"]);\n\n            this.gui.affirmLaunchButtonState('execute', false);\n\n            let handler = this.ws.getMainHandler();\n            this.ls.updateHandlers({commands: handler.commands, launch: true});\n            console.log({commands: handler.commands, launch: true});\n        });\n\n        /**\n         * Нажата кнопка \"Остановить\"\n         */\n        this._dispatcher.on('gui:stop', () => {\n            this.ls.stopExecution();\n            this.ws.highlightBlock(null);\n\n            this.gui.affirmLaunchButtonState('execute', true);\n\n            this._dispatcher.only([\"gui:*\"]);\n        });\n\n        /**\n         * Нажата клавиша\n         */\n        this._dispatcher.on('gui:keyup', button_code => {\n            /// найти первый обработчик нажатия клавиши\n            let handler = this.ws.getButtonHandler(button_code);\n\n            console.log(handler);\n\n            if (handler) {\n                /// обновить код на плате\n                this.ls.updateHandlers({commands: handler.code, launch: false});\n            }\n\n            /// проверить правильность нажатия клавиши\n            let valid = this.ins.validateButtonPress(button_code);\n            /// вывести нажатие клавиши\n            this.trc.displayKeyboardPress(button_code, !valid);\n\n            console.log('keyup', button_code);\n        });\n\n        /**\n         * Введена хэш-команда\n         */\n        this._dispatcher.on('gui:hash-command', command => {\n            switch (command.type) {\n                case \"goto\": {\n                    if (command.data.missionIDX === undefined)  {\n                        this.ins.forceExercise(command.data.missionIDX, undefined);\n                    }\n\n                    else if (command.data.exerciseIDX === undefined) {\n                        this.ins.forceExercise(undefined, command.data.exerciseIDX);\n                    }\n\n                    else {\n                        this.ins.forceExercise(command.data.missionIDX, command.data.exerciseIDX);\n                    }\n\n                    break;\n                }\n                default: {\n                    console.warn(\"Unrecognised hash command\");\n                }\n            }\n        });\n\n        /**\n         * Нажат пункт меню\n         */\n        this._dispatcher.on('gui:menu', (data) => {\n            switch (data.name) {\n                case 'courses': {\n                    this.gs.goToLessonPage();\n                    break;\n                }\n                case 'settings': {\n                    this.ls.openMenu();\n                    break;\n                }\n                case 'developer': {\n                    if (data.state) {\n                        this.gui.switchDeveloperMode(true);\n                        this.lay.revealTopPane();\n                    } else {\n                        this.gui.switchDeveloperMode(false);\n                        this.lay.concealTopPane();\n                    }\n                    break;\n                }\n                default: {\n                    console.warn(`Unhandled menu option '${option}'`);\n                    break;\n                }\n            }\n        });\n\n        /**\n         * Задание пройдено\n         */\n        this._dispatcher.on('ins:pass', verdict => {\n            this._dispatcher.only([]);\n            this.ws.saveProgram(verdict.missionIDX, verdict.exerciseIDX);\n            this.ws.saveProgram(verdict.missionIDX, verdict.exerciseIDX+1);\n            this.ins.tourPass()\n                .then(\n                    onResolve => this.ins.launchExerciseNext(),\n                    onReject => {\n                        this.ins.launchExerciseNext(true);\n                        this.gui.setMissionSkiddingOn(verdict.missionIDX);\n                    }\n                )\n                .then(() => this._dispatcher.only(['gui:*', 'ins:pass']))\n        });\n\n        /**\n         * Задание провалено\n         */\n        this._dispatcher.on('ins:fault', verdict => {\n            console.log(\"fault\", verdict);\n            this._dispatcher.only([]);\n            try {\n                this.ws.highlightErrorBlocks(verdict.blocks);\n                this.bb.highlightErrorPlates(verdict.blocks);\n            } catch (err) {\n                console.error(err);\n            }\n\n            this.ins.tourFault(verdict.message)\n                .then(() => this._dispatcher.only(['gui:*']))\n        });\n\n        /**\n         * Задание выполнено\n         */\n        this._dispatcher.on('ins:progress', mission => {\n           this.gui.setMissionProgress(mission);\n        });\n\n        /**\n         * Готовность платы к работе\n         */\n        this._dispatcher.on('ls:connect', () => {\n            this.gui.setBoardStatus('none');\n            /// Запросить ссылки для прошивки\n            // this.gs.getUpgradeURLs()\n                /// Обновить прошивку\n                // .then(urls  => this.ls.firmwareUpgrade(urls))\n                /// Разрешить обрабатывать события платы и GUI\n                // .then(()    => this._dispatcher.only(['ls:*', 'gui:*']))\n        });\n\n        /**\n         * Выполнена команда\n         */\n        this._dispatcher.on('ls:command', data => {\n            console.log(data);\n            this.ws.highlightBlock(data.block_id);\n        });\n\n        /**\n         * Изменено значение переменной\n         */\n        this._dispatcher.on('ls:variable', data => {\n            console.log(data);\n            this.trc.setVariableValue(data.id, data.value);\n        });\n\n        /**\n         * Когда программа завершится\n         */\n        this._dispatcher.on('ls:terminate', () => {\n            let exercise = this.ins.getExerciseCurrent();\n\n            this.ws.highlightBlock(null);\n            this.gui.affirmLaunchButtonState('execute', true);\n\n            if (exercise.check_buttons) {\n                this._dispatcher.only(['gui:*', 'ins:pass']);\n            } else {\n                this._dispatcher.only(['gui:*']);\n            }\n\n            // if (!exercise.is_sandbox  && !exercise.listeners_only) {\n            //     this._dispatcher.call(\"gui:check\");\n            // }\n        });\n\n        /**\n         * Изменены плашки\n         */\n        this._dispatcher.on('ls:plates', data => {\n            this.bb.clearCurrents();\n            this.bb.updatePlates(data);\n        });\n\n        /**\n         * Изменены токи\n         */\n        this._dispatcher.on('ls:currents', data => {\n            this.bb.updateCurrents(data);\n        });\n\n        /**\n         * Изменён статус платы\n         */\n        this._dispatcher.on('ls:board-status', status => {\n            console.log(\"BOARD STATUS\", status);\n            this.gui.setBoardStatus(status);\n        });\n\n        /**\n         * Достигнут тайм-аут соединения с IPC\n         */\n        this._dispatcher.on('ls:timeout', () => {\n            this.gui.showAlert('no_ipc');\n        });\n\n        /**\n         * Начало компоновки разметки\n         */\n        this._dispatcher.on('lay:compose-begin', data => {\n            this.ws.eject();\n            this.bb.eject();\n            this.trc.ejectBlocks();\n            this.trc.ejectButtons();\n            this.gui.ejectTextPane();\n        });\n\n        /**\n         * Окончание компоновки разметки\n         */\n        this._dispatcher.on('lay:compose-end', data => {\n            if (data) {\n                this.gui.injectLaunchButtons(data.launch_buttons);\n                this.ws.inject(data.workspace);\n                this.bb.inject(data.breadboard);\n                this.trc.injectBlocks(data.tracing);\n                this.trc.injectButtons(data.buttons);\n                this.gui.injectTextPane(data.task);\n                this.gui.injectLessonPane(data.lesson);\n            }\n        });\n\n        /**\n         * Нажата кнопка \"Выгрузить в файл\"\n         */\n        this._dispatcher.on('gui:unload-file', () => {\n            let tree = this.ws.getTree();\n            this.gui.saveToFile(tree);\n        });\n\n        /**\n         * Нажата кнопка \"Загрузить из файла\"\n         */\n        this._dispatcher.on('gui:load-file', tree => {\n            this.ws.loadTree(tree);\n        });\n\n        /**\n         * Тик сборки логов\n         */\n        this._dispatcher.on('log:tick', () => {\n            this._dispatcher.dumpLogs(true)\n                .then(logs      => this.log.collectLogs(logs))\n                .then(log_bunch => this.gs.reportLogBunch(log_bunch))\n                .then(()        => this.log.runTicker())\n        });\n\n        /**\n         * Размер разметки изменён\n         */\n        this._dispatcher.on('lay:resize', () => {\n            this.ws.resize();\n            this.trc.resize();\n        });\n    }\n}\n\nwindow.Application = Application;\n\nexport default Application;\n",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "BUTTON_CODES",
    "memberof": "js/index.js",
    "static": true,
    "longname": "js/index.js~BUTTON_CODES",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "Application",
    "memberof": "js/index.js",
    "static": true,
    "longname": "js/index.js~Application",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/index.js",
    "importStyle": "Application",
    "description": "Пользовательский интерфейс клиентской стороны web-приложения \"Макетная плата\"\n\nЗадаёт взаимосвязи между событиями и функциями модулей.\nЗапускается в браузере конечного пользователя.",
    "lineNumber": 26,
    "interface": false
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/index.js~Application",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/index.js~Application#constructor",
    "access": "public",
    "description": "Создать экземпляр приложения",
    "lineNumber": 30
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "_dispatcher",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#_dispatcher",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Dispatcher"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "_config",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#_config",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "configure",
    "memberof": "js/index.js~Application",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/index.js~Application#configure",
    "access": "public",
    "description": "Преобразовать пользовательскую конфигурацию в настройки модулей\n\nКонфигурация, удобная для пользователя, преобразуется\nв конфигурацию, требуемую в отдельных модулях",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "пользовательская конфигурация"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "run",
    "memberof": "js/index.js~Application",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/index.js~Application#run",
    "access": "public",
    "description": "Запустить приложение\n\nИнициализируются модули, выполняется подписка диспетчера на них",
    "lineNumber": 101,
    "params": [],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "_initModules",
    "memberof": "js/index.js~Application",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/index.js~Application#_initModules",
    "access": "private",
    "description": "Инициализировать модули\n\nИспользуется заданная ранее конфигурация модулей",
    "lineNumber": 121,
    "params": [],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "log",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#log",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "LogModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "gui",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#gui",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "GUIModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "trc",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#trc",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "TracingModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "lay",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#lay",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "LayoutModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "ws",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#ws",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "type": {
      "nullable": null,
      "types": [
        "WorkspaceModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "bb",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#bb",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "BreadboardModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "ins",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#ins",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "type": {
      "nullable": null,
      "types": [
        "InstructorModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "ls",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#ls",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "LocalServiceModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "gs",
    "memberof": "js/index.js~Application",
    "static": false,
    "longname": "js/index.js~Application#gs",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "GlobalServiceModule"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "_subscribeToModules",
    "memberof": "js/index.js~Application",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/index.js~Application#_subscribeToModules",
    "access": "private",
    "description": "Подписать диспетчер на события модулей",
    "lineNumber": 151,
    "params": [],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "_defineChains",
    "memberof": "js/index.js~Application",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/index.js~Application#_defineChains",
    "access": "private",
    "description": "Определить цепочки-обработчики",
    "lineNumber": 168,
    "params": [],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "js/modules/BreadboardModule.js",
    "content": "import Module from \"../core/Module\";\n\nimport BreadboardWrapper from '../wrappers/BreadboardWrapper';\n\n/**\n * Модуль для работы с макетной платой\n */\nexport default class BreadboardModule extends Module {\n    static get eventspace_name() {return \"bb\"}\n    static get event_types() {return [\"change\"]}\n\n    static defaults() {\n        return {\n            modeAdmin: false,\n        }\n    }\n\n    constructor(options) {\n        super(options);\n\n        this._state = {\n            display: false,\n        };\n\n        this._board = new BreadboardWrapper();\n\n        this._subscribeToWrapperEvents();\n    }\n\n    inject(dom_node) {\n        return new Promise(resolve => {\n            if (this._state.display) {\n                resolve(true);\n                return;\n            }\n\n            if (dom_node !== undefined) {\n                this._board.inject(dom_node, false);\n                // this._board.inject(dom_node, !this._options.modeAdmin);\n\n                this._state.display = true;\n            }\n\n            resolve();\n        });\n    }\n\n    eject() {\n        if (!this._state.display) {return true}\n\n        this._board.eject();\n\n        this._state.display = false;\n    }\n\n    highlightErrorPlates(plate_ids) {\n        if (!this._state.display) {return true}\n\n        this._board.highlightErrorPlates(plate_ids);\n    }\n\n    updatePlates(plates) {\n        this._board.setPlates(plates);\n    }\n\n    updatePlateState(plate_id, state) {\n        this._board.setPlateState(plate_id, state);\n    }\n\n    updateCurrents(data) {\n        this._board.setCurrent(data.threads);\n\n        if (!('elements' in data)) {return true}\n\n        for (let element of data.elements) {\n            console.log(element);\n            this._board.setPlateState(element.id, {\n                highlighted: element.highlight || false,\n            })\n        }\n\n        return true;\n    }\n\n    clearCurrents() {\n        this._board.removeCurrents();\n\n        for (let plate of this._board.getPlates()) {\n            this._board.setPlateState(plate.id, {\n                highlighted: false,\n            });\n        }\n    }\n\n    getData() {\n        if (!this._state.display) {return false}\n\n        let plates = this._board.getPlates();\n\n        console.log(plates);\n\n        return plates;\n    }\n\n    _subscribeToWrapperEvents() {\n        this._board.onChange((data) => {\n            this.emitEvent(\"change\", data);\n        })\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/BreadboardModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "class",
    "name": "BreadboardModule",
    "memberof": "js/modules/BreadboardModule.js",
    "static": true,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/BreadboardModule.js",
    "importStyle": "BreadboardModule",
    "description": "Модуль для работы с макетной платой",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 171,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"modeAdmin\": *}"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"display\": *}"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "_board",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#_board",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "inject",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#inject",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "dom_node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "eject",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#eject",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "highlightErrorPlates",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#highlightErrorPlates",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "plate_ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "updatePlates",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#updatePlates",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "plates",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "updatePlateState",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#updatePlateState",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "plate_id",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "updateCurrents",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#updateCurrents",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "clearCurrents",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#clearCurrents",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getData",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#getData",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/BreadboardModule.js~BreadboardModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/BreadboardModule.js~BreadboardModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "js/modules/GUIModule.js",
    "content": "import Module from \"../core/Module\";\n\nimport SpinnerWrapper from \"../wrappers/SpinnerWrapper\";\nimport LessonPaneWrapper from \"../wrappers/LessonPaneWrapper\";\nimport TextPaneWrapper from \"../wrappers/TextPaneWrapper\";\nimport LaunchBtnWrapper from \"../wrappers/LaunchBtnWrapper\";\nimport FileWrapper from \"../wrappers/FileWrapper\";\nimport AlertifierWrapper from \"../wrappers/AlertifierWrapper\";\n\nconst BOARD_STATUSES = {\n    SEARCH: 'search',\n    CONNECT: 'connect',\n    DISCONNECT: 'disconnect',\n    NONE: 'none',\n};\n\nconst HASH_TYPES = {\n    GOTO: \"goto\",\n\n    NONE: \"none\",\n};\n\nconst REGEXPS = {\n    MISSION_EXERCISE:   /^#m[0-9]+e[0-9]+$/g,\n    MISSION:            /^#m[0-9]+$/g,\n    EXERCISE:           /^#e[0-9]+$/g,\n\n    NUMBERS:            /[0-9]+/g,\n};\n\nconst LAUNCH_VARIANTS = {\n    NONE: 0,\n    CHECK: 1,\n    EXECUTE: 2,\n    CHECK_N_EXECUTE: 3,\n};\n\n/**\n * Модуль, управляющий базовым функциями графического интерфейса\n * и выполняющий первичную обработку его событий\n *\n * Отвечает за обработку нажатий всех кнопок, нажатий всех клавиш,\n * выгрузку и загрузку файлов.\n */\nexport default class GUIModule extends Module {\n    static get eventspace_name() {return \"gui\"}\n    static get event_types() {return [\"ready\", \"mission\", \"run\", \"stop\", \"check\", \"keyup\", \"hash-command\", \"menu\", \"load-file\", \"unload-file\"]}\n\n    static defaults() {\n        return {\n            anyKey: false,  // отключить фильтрацию клавиш\n            logoText: \"Tapanda\",\n            imagesPath: \"\",\n            devMode: false,\n        }\n    }\n\n    constructor(options) {\n        super(options);\n\n        this._button_codes = [];\n\n        this._state = {\n            ready: false,\n            switched: true, // debug only\n            listenButtons: false,\n            launchVariant: false,\n\n            areasDisp: {\n                text: false,\n                lesson: false,\n                button: false,\n            }\n        };\n\n        this._task_description = undefined;\n\n        this._filer = new FileWrapper();\n        this._spinner = new SpinnerWrapper();\n        this._lesson_pane = new LessonPaneWrapper();\n        this._text_pane = new TextPaneWrapper();\n        this._launch_btn = new LaunchBtnWrapper();\n        this._alertifier = new AlertifierWrapper();\n\n        if (this._options.imagesPath) {\n            this._alertifier.setImagesPath(this._options.imagesPath);\n        }\n\n        this._lesson_pane.registerLogoText(this._options.logoText);\n\n        this._setMenuStructure();\n\n        if (this._options.devMode) {\n            this.switchDeveloperMode(true);\n        } else {\n            this.switchDeveloperMode(false);\n        }\n\n        this._subscribeToWrapperEvents();\n    }\n\n    hideSpinner() {\n        this._spinner.hide();\n\n        if (!this._state.ready) {\n            this._state.ready = true;\n            this.emitEvent(\"ready\");\n        }\n    }\n\n    showSpinnerError(message) {\n        this._spinner.setTextError(message);\n    }\n\n    showMissionButtons(missions) {\n        return new Promise((resolve, reject) => {\n            if (!missions) {return resolve(false)}\n\n            this._lesson_pane.registerMissions(missions);\n\n            resolve(true);\n        });\n    }\n\n    setMissionCurrent(mission_idx) {\n        return new Promise((resolve, reject) => {\n            this._lesson_pane.setMissionActive(mission_idx);\n\n            resolve(true);\n        });\n    }\n\n    setMissionProgress(mission) {\n        return new Promise((resolve, reject) => {\n            if (!mission) {return resolve(false)}\n\n            this._lesson_pane.setMissionProgress(mission.missionIDX, mission.exerciseIDX);\n\n            resolve(true);\n        });\n    }\n\n    setMissionSkiddingOn(mission_idx) {\n        return new Promise((resolve, reject) => {\n            if (!mission_idx) {return resolve(false)}\n\n            this._lesson_pane.setMissionSkidding(mission_idx, true);\n\n            resolve(true);\n        });\n    }\n\n    setExerciseCurrent(exercise_idx) {\n        return new Promise((resolve, reject) => {\n            console.log(exercise_idx);\n\n            this._lesson_pane.setExerciseActive(exercise_idx);\n\n            resolve(true);\n        });\n    }\n\n    setCourseText(lesson_name) {\n        return new Promise((resolve, reject) => {\n            let text = \"Урок: \" + lesson_name;\n\n            if (!this._state.areasDisp.lesson) {\n                this._lesson_pane.registerCourseText(text);\n            } else {\n                this._lesson_pane.setCourseText(text);\n            }\n\n            resolve(true);\n        });\n    }\n\n    setBoardStatus(status) {\n        console.log(\"BS\", status);\n        switch (status) {\n            case BOARD_STATUSES.SEARCH: {\n                this.hideAllAlerts();\n                this._lesson_pane.setStatus('warning');\n                break;\n            }\n            case BOARD_STATUSES.CONNECT: {\n                this.hideAllAlerts();\n                this._lesson_pane.setStatus('success');\n                break;\n            }\n            case BOARD_STATUSES.DISCONNECT: {\n                this.showAlert('no_board');\n                this._lesson_pane.setStatus('error');\n                break;\n            }\n            case BOARD_STATUSES.NONE: {\n                this._lesson_pane.setStatus('active');\n                break;\n            }\n            default: {\n                this._lesson_pane.setStatus('default');\n                break;\n            }\n        }\n    }\n\n    showTask(html) {\n        this._text_pane.setText(html);\n\n        return Promise.resolve();\n    }\n\n    setLaunchVariant(variant) {\n        if (!this._state.areasDisp.buttons)   {return Promise.resolve(false)}\n\n        console.log(\"SLV\", variant);\n\n        switch (variant) {\n            case LAUNCH_VARIANTS.NONE: {\n                this._launch_btn.hide();\n                break;\n            }\n            case LAUNCH_VARIANTS.CHECK: {\n                this._launch_btn.show(0);\n                break;\n            }\n            case LAUNCH_VARIANTS.EXECUTE: {\n                this._launch_btn.show(1);\n                break;\n            }\n            case LAUNCH_VARIANTS.CHECK_N_EXECUTE: {\n                this._launch_btn.show(2);\n                break;\n            }\n            default: {\n                this._state.launchVariant = variant;\n            }\n        }\n\n        this._state.launchVariant = !this._state.launchVariant;\n\n        return Promise.resolve(true);\n    }\n\n    affirmLaunchButtonState(button, start=true) {\n        if (!this._state.areasDisp.buttons) {return false}\n        if (!button) {throw new TypeError(\"Button is not defined\")}\n\n        if (start) {\n            this._launch_btn.setStart(button);\n        } else {\n            this._launch_btn.setStop(button);\n        }\n    }\n\n    injectLaunchButtons(dom_node) {\n        if (!dom_node)                      {return Promise.resolve(false)}\n        if (this._state.areasDisp.buttons)   {return Promise.resolve(true)}\n\n        this._state.areasDisp.buttons = true;\n\n        return this._launch_btn.inject(dom_node);\n    }\n\n    injectTextPane(dom_node) {\n        if (!dom_node)                  {return Promise.resolve(false)}\n        if (this._state.areasDisp.text) {return Promise.resolve(true)}\n\n        this._state.areasDisp.text = true;\n\n        return this._text_pane.inject(dom_node);\n    }\n\n    ejectTextPane() {\n        if (!this._state.areasDisp.text) {return Promise.resolve(true)}\n\n        this._state.areasDisp.text = false;\n\n        return this._text_pane.eject();\n    }\n\n    injectLessonPane(dom_node) {\n        if (!dom_node)                  {return Promise.resolve(false)}\n        if (this._state.areasDisp.lesson) {return Promise.resolve(true)}\n\n        this._state.areasDisp.lesson = true;\n\n        return this._lesson_pane.inject(dom_node);\n    }\n\n    /**\n     * Назначить допустимые коды клавиш для фильтрации\n     *\n     * @param {Array} button_codes массив кодов клавиш\n     */\n    registerButtonCodes(button_codes) {\n        if (!Array.isArray(button_codes)) {\n            throw new TypeError(\"setButtonCodes(): button codes should be an Array instance\");\n        }\n\n        this._button_codes = button_codes;\n    }\n\n    /**\n     * Прослушивать ли нажатия клавиш\n     *\n     * @param {boolean} on true - включить прослушивание, иначе - выключить\n     */\n    listenButtons(on) {\n        this._state.listenButtons = on;\n    }\n\n    /**\n     * Выгрузить строку в файл\n     *\n     * После вызова функции последует вывод диалогового окна\n     * с запросом на указание пути и имени нового файла\n     *\n     * @param str {String} исходная строка для сохранения\n     */\n    saveToFile(str) {\n        this._filer.saveStrToFile(\"codehour-sample-code.txt\", str);\n    }\n\n    /**\n     * Загрузить строку из файла\n     *\n     * Процедура асинхронная, поэтому по результату обработки файла\n     * генерируется событие \"load-file\"\n     *\n     * @param {File} file исходный файл\n     */\n    loadFromFile(file) {\n        this._filer.readStrFromFile(file)\n            .then(str => this.emitEvent(\"load-file\", str));\n    }\n\n    showAlert(type) {\n        this._alertifier.alertIndelible(type);\n    }\n\n    showAlertInputCommand() {\n        this._alertifier.alertInput('command')\n            .then(command => {\n                command = this._filterURLHashCommand(command);\n\n                this.emitEvent(\"hash-command\", command);\n            });\n    }\n\n    hideAllAlerts() {\n        this._alertifier.closeAll();\n    }\n\n    switchDeveloperMode(on) {\n        this._lesson_pane.switchTask(on);\n    }\n\n    /**\n     * Отфильтровать событие нажатия клавиши\n     *\n     * Тип события (keydown, keypress, keyup) не имеет значения\n     *\n     * @param {Integer} keycode код нажатой клавиши\n     * @returns {Integer|bool} true, если код прошёл через фильтр, код нажатой клавиши; иначе false\n     * @private\n     */\n    _filterKeyEvent(keycode) {\n        if (this._button_codes.indexOf(keycode) >= 0 || this._options.anyKey) {\n            return keycode;\n        }\n\n        return false;\n    }\n\n    _filterURLHashCommand(hash) {\n        if (typeof hash !== \"string\") {throw new TypeError(\"URL Hash is not a string\")}\n\n        let mission_idx, exercise_idx;\n\n        console.log(hash);\n\n        if (hash.match(REGEXPS.MISSION_EXERCISE)) {\n            [mission_idx, exercise_idx] = hash.match(REGEXPS.NUMBERS);\n        }\n\n        else if (hash.match(REGEXPS.MISSION)) {\n            mission_idx = hash.match(REGEXPS.NUMBERS);\n        }\n\n        else if (hash.match(REGEXPS.EXERCISE)) {\n            exercise_idx = hash.match(REGEXPS.NUMBERS);\n        }\n\n        else {\n            return {\n                type: HASH_TYPES.NONE,\n            }\n        }\n\n        return {\n            type: HASH_TYPES.GOTO,\n            data: {\n                missionIDX: Number(mission_idx),\n                exerciseIDX: Number(exercise_idx),\n            }\n        };\n    }\n\n    _checkURLHashCommand() {\n        let hash = window.location.hash;\n\n        return this._filterURLHashCommand(hash);\n    }\n\n    _setMenuStructure() {\n        this._lesson_pane.setMenuStructure([\n            {\n                type: 'default',\n                name: \"courses\",\n                text: \"Курсы\",\n                handler: (name) => {this.emitEvent(\"menu\", {name: name})}\n            },\n            {\n                type: 'default',\n                name: \"settings\",\n                text: \"Настройки\",\n                handler: (name) => {this.emitEvent(\"menu\", {name: name})}\n            },\n            {\n                type: 'radio',\n                name: \"developer\",\n                text: \"Разработчик\",\n                handler: (name, pressed) => {this.emitEvent(\"menu\", {name: name, state: pressed})}\n            },\n            {\n                type: 'default',\n                name: \"command\",\n                text: \"Выполнить\",\n                handler: () => {this.showAlertInputCommand()}\n            },\n            {\n                type: 'disabled',\n                name: \"origin\",\n                text: window.location.host,\n                right: true\n            },\n        ]);\n    }\n\n    _subscribeToWrapperEvents() {\n        /* Как только нажата кнопка переключения разметки */\n        // $(\"#switch-btn\").click(() => {\n        //     this._state.switched = !this._state.switched;\n        //     this.emitEvent(\"switch\", this._state.switched);\n        //\n        //     this._debug.log('Switch clicked: ', this._state.switched);\n        // });\n\n        /* Как только нажата кнопка запуса миссии */\n        this._lesson_pane.onMissionClick(idx => {\n            this.emitEvent(\"mission\", idx);\n        });\n\n        this._lesson_pane.onMenuClick(() => {\n            this.emitEvent(\"menu\");\n        });\n\n        /* Как только нажата кнопка запуска/проверки */\n        this._launch_btn.onButtonClick((button, start) => {\n            if (button === 'check') {\n                this.emitEvent(\"check\");\n            }\n\n            if (button === 'execute') {\n                if (start) {\n                    this.emitEvent(\"run\");\n                } else {\n                    this.emitEvent(\"stop\");\n                }\n            }\n        });\n\n        /* Когда нажата кнопка загрузки файла */\n        $(\" #load-btn\").change((evt) => {\n            this.loadFromFile(evt.target.files[0]);\n        });\n\n        /* Как только нажата кнопка выгрузки кода */\n        $(\"#unload-btn\").click(() => {\n            this.emitEvent(\"unload-file\");\n        });\n\n        /* Как только нажата клавиша */\n        $(document).keyup(event => {\n            if (this._state.listenButtons) {\n                if (this._filterKeyEvent(event.which)) {\n                    this.emitEvent(\"keyup\", event.which);\n                }\n            }\n        });\n\n        window.onhashchange = () => {\n            let command = this._checkURLHashCommand();\n\n            this.emitEvent(\"hash-command\", command);\n        }\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/GUIModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "BOARD_STATUSES",
    "memberof": "js/modules/GUIModule.js",
    "static": true,
    "longname": "js/modules/GUIModule.js~BOARD_STATUSES",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/GUIModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"SEARCH\": string, \"CONNECT\": string, \"DISCONNECT\": string, \"NONE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "HASH_TYPES",
    "memberof": "js/modules/GUIModule.js",
    "static": true,
    "longname": "js/modules/GUIModule.js~HASH_TYPES",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/GUIModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"GOTO\": string, \"NONE\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "REGEXPS",
    "memberof": "js/modules/GUIModule.js",
    "static": true,
    "longname": "js/modules/GUIModule.js~REGEXPS",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/GUIModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"MISSION_EXERCISE\": *, \"MISSION\": *, \"EXERCISE\": *, \"NUMBERS\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "LAUNCH_VARIANTS",
    "memberof": "js/modules/GUIModule.js",
    "static": true,
    "longname": "js/modules/GUIModule.js~LAUNCH_VARIANTS",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/GUIModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"NONE\": *, \"CHECK\": number, \"EXECUTE\": number, \"CHECK_N_EXECUTE\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "GUIModule",
    "memberof": "js/modules/GUIModule.js",
    "static": true,
    "longname": "js/modules/GUIModule.js~GUIModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/GUIModule.js",
    "importStyle": "GUIModule",
    "description": "Модуль, управляющий базовым функциями графического интерфейса\nи выполняющий первичную обработку его событий\n\nОтвечает за обработку нажатий всех кнопок, нажатий всех клавиш,\nвыгрузку и загрузку файлов.",
    "lineNumber": 45,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 192,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/GUIModule.js~GUIModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/GUIModule.js~GUIModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/GUIModule.js~GUIModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"anyKey\": *, \"logoText\": string, \"imagesPath\": *, \"devMode\": *}"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_button_codes",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_button_codes",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "{\"ready\": *, \"switched\": boolean, \"listenButtons\": *, \"launchVariant\": *, \"areasDisp\": *}"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "_task_description",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_task_description",
    "access": "private",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "_filer",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_filer",
    "access": "private",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "_spinner",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_spinner",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_lesson_pane",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_lesson_pane",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_text_pane",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_text_pane",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_launch_btn",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_launch_btn",
    "access": "private",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "_alertifier",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_alertifier",
    "access": "private",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "hideSpinner",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#hideSpinner",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "showSpinnerError",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#showSpinnerError",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "showMissionButtons",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#showMissionButtons",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "missions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "setMissionCurrent",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#setMissionCurrent",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "params": [
      {
        "name": "mission_idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "setMissionProgress",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#setMissionProgress",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "mission",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "setMissionSkiddingOn",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#setMissionSkiddingOn",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "params": [
      {
        "name": "mission_idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "setExerciseCurrent",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#setExerciseCurrent",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "exercise_idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "setCourseText",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#setCourseText",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "lesson_name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "setBoardStatus",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#setBoardStatus",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [
      {
        "name": "status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "showTask",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#showTask",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "html",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "setLaunchVariant",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#setLaunchVariant",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "params": [
      {
        "name": "variant",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "affirmLaunchButtonState",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#affirmLaunchButtonState",
    "access": "public",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "params": [
      {
        "name": "button",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "injectLaunchButtons",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#injectLaunchButtons",
    "access": "public",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "params": [
      {
        "name": "dom_node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "injectTextPane",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#injectTextPane",
    "access": "public",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "dom_node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "ejectTextPane",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#ejectTextPane",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "injectLessonPane",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#injectLessonPane",
    "access": "public",
    "description": null,
    "lineNumber": 281,
    "undocument": true,
    "params": [
      {
        "name": "dom_node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "registerButtonCodes",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#registerButtonCodes",
    "access": "public",
    "description": "Назначить допустимые коды клавиш для фильтрации",
    "lineNumber": 295,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "button_codes",
        "description": "массив кодов клавиш"
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "listenButtons",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#listenButtons",
    "access": "public",
    "description": "Прослушивать ли нажатия клавиш",
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "on",
        "description": "true - включить прослушивание, иначе - выключить"
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "saveToFile",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#saveToFile",
    "access": "public",
    "description": "Выгрузить строку в файл\n\nПосле вызова функции последует вывод диалогового окна\nс запросом на указание пути и имени нового файла",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "str",
        "description": "{String} исходная строка для сохранения"
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "loadFromFile",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#loadFromFile",
    "access": "public",
    "description": "Загрузить строку из файла\n\nПроцедура асинхронная, поэтому по результату обработки файла\nгенерируется событие \"load-file\"",
    "lineNumber": 332,
    "params": [
      {
        "nullable": null,
        "types": [
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "исходный файл"
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "showAlert",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#showAlert",
    "access": "public",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "showAlertInputCommand",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#showAlertInputCommand",
    "access": "public",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "hideAllAlerts",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#hideAllAlerts",
    "access": "public",
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "switchDeveloperMode",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#switchDeveloperMode",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [
      {
        "name": "on",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "_filterKeyEvent",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_filterKeyEvent",
    "access": "private",
    "description": "Отфильтровать событие нажатия клавиши\n\nТип события (keydown, keypress, keyup) не имеет значения",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Integer|bool} true, если код прошёл через фильтр, код нажатой клавиши; иначе false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "keycode",
        "description": "код нажатой клавиши"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Integer",
        "bool"
      ],
      "spread": false,
      "description": "true, если код прошёл через фильтр, код нажатой клавиши; иначе false"
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "_filterURLHashCommand",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_filterURLHashCommand",
    "access": "private",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "_checkURLHashCommand",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_checkURLHashCommand",
    "access": "private",
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "_setMenuStructure",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_setMenuStructure",
    "access": "private",
    "description": null,
    "lineNumber": 415,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/GUIModule.js~GUIModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GUIModule.js~GUIModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "js/modules/GlobalServiceModule.js",
    "content": "import Module from '../core/Module';\n\nimport Cookies from 'js-cookie';\n\n/**\n * Модуль для работы с глобальным сервером\n */\nexport default class GlobalServiceModule extends Module {\n// public:\n\n    static get eventspace_name()    {return \"gs\"}\n    static get event_types()        {return [\"error\"]}\n\n    static defaults() {\n        return {\n            origin: 'http://127.0.0.1:8000',\n            api: {\n                lesson: '/coursesvc/lesson/',\n                firmware: '/fwsvc/geturls/last/',\n                log_bunch: '/logsvc/logbunch/',\n                check_handlers: '/coursesvc/check/',\n            },\n            csrfRequired: true,\n            modeDummy: false\n        }\n    }\n\n    constructor(options) {\n        super(options);\n\n        this._csrfToken = undefined;\n\n        if (this._options.csrfRequired) {\n            this._configureCSRF();\n        }\n\n        this._subscribeToWrapperEvents();\n    }\n\n    goToLessonPage() {\n        window.location.href = this._options.origin;\n    }\n\n    /**\n     * Получить данные урока\n     *\n     * @param   {number|string} lesson_id  ИД урока\n     *\n     * @returns {Promise<any>}  данные урока\n     */\n    getLessonData(lesson_id) {\n        if (this._options.modeDummy) {return new Promise(resolve => resolve())}\n\n        return new Promise((resolve, reject) => {\n            fetch(this._options.origin + this._options.api.lesson + lesson_id)\n                .then(response => {\n                    if (response.status >= 200 && response.status < 300) {\n                        resolve(response.json());\n                    } else {\n                        let error = new Error(response.statusText || response.status);\n                        error.response = response;\n\n                        reject(error);\n                    }\n                }).catch(err => {\n                    this._debug.error(err);\n                    reject(err);\n                });\n        });\n    }\n\n    /**\n     * Отправить решение на проверку\n     *\n     * @param   {number}    exercise_id ИД текущего задания\n     * @param   {object}    solution    Решение задания\n     *                                  {handlers: Коды (основной и обработчики), board: Данные состояния платы}\n     *\n     * @returns {Promise}   JSON-ответ с результатом проверки / undefined, если в холостом режиме\n     */\n    commitSolution(exercise_id, solution) {\n        if (this._options.modeDummy) {return Promise.resolve()}\n\n        if (typeof exercise_id !== \"number\") {return Promise.reject(new TypeError(\"Exercise ID is not a number\"))}\n\n        return new Promise((resolve, reject) => {\n            let packet = {handlers: solution.handlers, board: solution.board};\n\n            // let data = new FormData();\n            // data.append(\"json\", JSON.stringify(packet));\n\n            let request = {\n                // mode: 'no-cors',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    // 'Access-Control-Allow-Origin': this._options.origin,\n                    // 'Access-Control-Allow-Credentials': true,\n                    // 'Access-Control-Allow-Methods': 'POST',\n                    'X-CSRFToken': this._csrfToken\n                },\n                method: \"POST\",\n                body: JSON.stringify(packet),\n                credentials: 'same-origin',\n            };\n\n\n            return fetch(this._options.origin + this._options.api.check_handlers + exercise_id + '/', request)\n                .then(response => {\n                    if (response.error) {\n                        reject(response.error())\n                    }\n\n                    resolve(response.json());\n                }).catch(err => {\n                    this._debug.error(err);\n                    reject(err);\n                });\n        });\n    }\n\n    /**\n     * Отправить лог-записи\n     *\n     * @param log_bunch собранный пакет лог-записей\n     * @returns {Promise} Ответ сервера / undefined, если в холостом режиме\n     */\n    reportLogBunch(log_bunch) {\n        if (this._options.modeDummy) {return new Promise(resolve => resolve())}\n\n        // let data = new FormData();\n        // data.append(\"json\", JSON.stringify(log_bunch));\n\n        console.log(log_bunch);\n\n        let request = {\n            // mode: 'no-cors',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                // 'Access-Control-Allow-Origin': this._options.origin,\n                // 'Access-Control-Allow-Credentials': true,\n                // 'Access-Control-Allow-Methods': 'POST',\n                'X-CSRFToken': this._csrfToken\n            },\n            method: \"POST\",\n            body: JSON.stringify(log_bunch),\n            credentials: 'same-origin'\n        };\n\n        return fetch(this._options.origin + this._options.api.log_bunch, request)\n            .then(response => {\n                return response;\n            }).catch(err => {\n                this._debug.error(err);\n                this.emitEvent('error', err);\n            });\n    }\n\n    /**\n     * Отправить запрос на получение ссылок на прошивку платы\n     *\n     * @returns {Promise} массив ссылок на файлы прошивки платы / [], если в холостом режиме\n     */\n    getUpgradeURLs() {\n        if (this._options.modeDummy) {return new Promise(resolve => {resolve([])})}\n\n        return fetch(this._options.origin + this._options.api.firmware)\n            .then(response => {\n                return response.json();\n            }).catch(err => {\n                this._debug.error(err);\n                this.emitEvent('error', err);\n            });\n    }\n\n    /**\n     * Получить CSRF-токен (если есть)\n     *\n     * @returns {boolean} true, если модуль в холостом режиме\n     * @private\n     */\n    _configureCSRF() {\n        if (this._options.modeDummy) {return true}\n\n        this._csrfToken = Cookies.get('csrftoken');\n\n        if (typeof this._csrfToken === \"undefined\") {\n            throw new Error(\"This application loaded from invalid server\");\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @private\n     */\n    _subscribeToWrapperEvents() {\n        if (this._options.modeDummy) {\n            this._debug.log(\"Working in DUMMY mode\");\n        }\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/GlobalServiceModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "class",
    "name": "GlobalServiceModule",
    "memberof": "js/modules/GlobalServiceModule.js",
    "static": true,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/GlobalServiceModule.js",
    "importStyle": "GlobalServiceModule",
    "description": "Модуль для работы с глобальным сервером",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 237,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"origin\": string, \"api\": *, \"csrfRequired\": boolean, \"modeDummy\": *}"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "_csrfToken",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#_csrfToken",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "goToLessonPage",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#goToLessonPage",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "getLessonData",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#getLessonData",
    "access": "public",
    "description": "Получить данные урока",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}  данные урока"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lesson_id",
        "description": "ИД урока"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": "данные урока"
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "commitSolution",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#commitSolution",
    "access": "public",
    "description": "Отправить решение на проверку",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}   JSON-ответ с результатом проверки / undefined, если в холостом режиме"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "exercise_id",
        "description": "ИД текущего задания"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "solution",
        "description": "Решение задания\n                                 {handlers: Коды (основной и обработчики), board: Данные состояния платы}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "JSON-ответ с результатом проверки / undefined, если в холостом режиме"
    }
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "reportLogBunch",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#reportLogBunch",
    "access": "public",
    "description": "Отправить лог-записи",
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Ответ сервера / undefined, если в холостом режиме"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "log_bunch",
        "description": "собранный пакет лог-записей"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Ответ сервера / undefined, если в холостом режиме"
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "getUpgradeURLs",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#getUpgradeURLs",
    "access": "public",
    "description": "Отправить запрос на получение ссылок на прошивку платы",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} массив ссылок на файлы прошивки платы / [], если в холостом режиме"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "массив ссылок на файлы прошивки платы / [], если в холостом режиме"
    },
    "params": []
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_configureCSRF",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#_configureCSRF",
    "access": "private",
    "description": "Получить CSRF-токен (если есть)",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true, если модуль в холостом режиме"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true, если модуль в холостом режиме"
    },
    "params": []
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/GlobalServiceModule.js~GlobalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/GlobalServiceModule.js~GlobalServiceModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": "",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@inheritDoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "file",
    "name": "js/modules/InstructorModule.js",
    "content": "import Module from \"../core/Module\";\n\nimport TourWrapper from \"../wrappers/TourWrapper\";\n\nimport LessonPreprocessor from  \"../utils/lesson-processor/processor\";\n\nconst API = {\n    STATUS_CODES: {\n        PASS: \"OK\",\n        FAULT: \"error\"\n    }\n};\n\n/**\n * Модуль, отвечающий за отображение всплывающих подсказок.\n */\nexport default class InstructorModule extends Module {\n    static get eventspace_name() {return \"ins\"}\n    static get event_types() {return [\"start\", \"pass\", \"fault\", \"progress\", \"mission\", \"finish\", \"error\"]}\n\n    static defaults() {\n        return {\n            lessonID: 1,\n            silent: false,\n        }\n    }\n\n    constructor(options) {\n        super(options);\n\n        this._lesson = undefined;\n        this._buttons_model = [];\n\n        this._state = {\n            missionIDX: undefined,\n            missions: [],\n\n            buttonIDX: undefined\n        };\n\n        this._subscribeToWrapperEvents();\n    }\n\n    /**\n     * Выдать ИД начального урока\n     *\n     * Определяет номер урока в зависимости от входных данных\n     * модуля\n     *\n     * @param {number} lesson_id (опционально) ИД урока\n     * @returns {Promise<number>} ИД урока\n     */\n    getInitialLessonID(lesson_id) {\n        return new Promise(resolve => {\n            if (lesson_id) {\n                resolve(lesson_id);\n            } else {\n                resolve(this._options.lessonID);\n            }\n        });\n    }\n\n    /**\n     * Загрузить урок в модуль\n     *\n     * Происходит первичная обработка данных и установка указателей\n     *\n     * @param lesson_data {object} JSON-пакет с данными урока\n     *\n     * @returns {Promise<any>}\n     */\n    loadLesson(lesson_data) {\n        return new Promise(resolve => {\n            if (!lesson_data) {\n                throw new TypeError(\"No lesson data were provided\");\n            }\n\n            console.log(lesson_data);\n\n            this._parseLesson(lesson_data);\n\n            resolve(this._lesson);\n        });\n    }\n\n    /**\n     * Запустить урок\n     *\n     * Запускает урок с первго упражнения первой миссии\n     *\n     * @returns {boolean}\n     */\n    launchLesson(mission_idx, exercise_idx) {\n        mission_idx = mission_idx ? mission_idx : 0;\n        exercise_idx = exercise_idx ? exercise_idx : 0;\n\n        return this.forceExercise(mission_idx, exercise_idx);\n    }\n\n    /**\n     * Запустить следующую миссию\n     *\n     * @returns {Promise<object>|Promise<void>}\n     */\n    launchMissionNext() {\n        /// определить индекс следующей миссии\n        let mission_idx = this._state.missionIDX + 1;\n\n        if (this._state.missions[this._state.missionIDX].skidding) {\n            return Promise.resolve();\n        }\n\n        /// если следующей миссии не существует\n        if (mission_idx === this._state.missions.length) {\n            /// сообщить диспетчеру о завершении\n            this.emitEvent('finish');\n\n            return Promise.resolve();\n        } else {\n            /// запустить следующую миссию\n            return this.launchMission(mission_idx);\n        }\n    }\n\n    /**\n     * Запустить следующее упражнение\n     *\n     * @param {boolean} skid    режим \"буксовки\" - только переключить указатели\n     *\n     * @returns {Promise<object>|Promise<void>}\n     */\n    launchExerciseNext(skid=false) {\n        /// определить индекс следующего упражнения\n        let exercise_idx = this._getExerciseIDX(this._state.missionIDX) + 1;\n\n        this._state.missions[this._state.missionIDX].skidding = skid;\n        this._state.missions[this._state.missionIDX].exerciseSkiddingIDX = exercise_idx - 1;\n\n        /// если следующего упражнения не существует\n        if (exercise_idx === this._state.missions[this._state.missionIDX].exerciseCount) {\n            /// запустить следующую миссию\n            return this.launchMissionNext();\n        } else if (exercise_idx > 0) {\n            /// запустить следующее упражнение\n            return this.launchExercise(exercise_idx);\n        }\n    }\n\n    /**\n     * Запустить миссию\n     *\n     * @param {number}  mission_idx     индекс миссии\n     *\n     * @returns {boolean}\n     */\n    launchMission(mission_idx) {\n        let chain = new Promise(resolve => {resolve(false)});\n\n        /// если миссии совпали\n        if (mission_idx === this._state.missionIDX) {\n            /// если текущая миссия в режиме пробуксовки\n            if (this._state.missions[mission_idx].skidding) {\n                /// необходим сброс (см. далее)\n                chain = new Promise(resolve => {resolve(true)});\n            } else {\n                /// если не режим пробуксовки, то спросить подтвержение пользователя\n                chain = chain.then(() => this.tourConfirm(\"Начать задание снова?\"))\n            }\n        }\n\n        chain.then(\n            reset => {\n                this.emitEvent(\"mission\", mission_idx);\n\n                /// определить индекс упражнения в миссии\n                let exercise_idx = this._state.missions[mission_idx].exerciseIDX;\n\n                /// если сброс включён и нет пробуксовки\n                if (reset && !this._state.missions[this._state.missionIDX].skidding) {\n                    exercise_idx = 0;\n                }\n\n                /// выключить режим пробуксовки\n                this._state.missions[mission_idx].skidding = false;\n\n                if (mission_idx in this._state.missions) {\n                    /// обновить индекс миссии\n                    this._state.missionIDX = mission_idx;\n\n                    return this.launchExercise(exercise_idx);\n                }\n            },\n            skip => {\n                return false;\n            }\n\n        );\n\n        return chain;\n    }\n\n    /**\n     * Запустить упражнение\n     *\n     * @param {number}  exercise_idx    индекс упражнения в текущей миссии\n     * @param {boolean} forced\n     *\n     * @returns {Promise<object>}\n     */\n    launchExercise(exercise_idx, forced=false) {\n        let mission_idx = this._state.missionIDX;\n\n        /// если индекс упражнения находится в допустимых пределах\n        if (0 <= exercise_idx && exercise_idx < this._state.missions[mission_idx].exerciseCount) {\n            /// обновить заданный индекс упражнения в текущей миссии\n            this._state.missions[mission_idx].exerciseIDX = exercise_idx;\n\n            /// извлечь данные упражнения\n            let exercise_data = this._lesson.missions[mission_idx].exercises[exercise_idx];\n            exercise_data.missionIDX = mission_idx;\n            exercise_data.exerciseIDX = exercise_idx;\n\n            /// если не режим буксовки либо форсированный режим\n            if (forced || !this._state.missions[mission_idx].skidding) {\n                /// сообщить диспетчеру о запуске упражнения\n                this.emitEvent(\"start\", exercise_data);\n            }\n\n            /// сообщить вызывающей программе о запуске упражнения\n            return Promise.resolve(exercise_data);\n        } else {\n            throw new Error(`Exercise ${exercise_idx} in mission ${mission_idx} not found`);\n        }\n    }\n\n    forceExercise(mission_idx, exercise_idx) {\n        if (mission_idx === undefined || Number.isNaN(mission_idx)) {\n            mission_idx = this._state.missionIDX\n        }\n\n        if (exercise_idx === undefined || Number.isNaN(exercise_idx)) {\n            exercise_idx = this._state.missions[this._state.missionIDX].exerciseIDX\n        }\n\n        if (!(mission_idx in this._state.missions)) {\n            throw new RangeError(`Mission ${mission_idx} does not exist in this lesson`);\n        }\n\n        if (!(exercise_idx < this._state.missions[mission_idx].exerciseCount)) {\n            throw new RangeError(`Exercise ${exercise_idx} does not exist in mission ${mission_idx}`);\n        }\n\n        /// обновить индекс миссии\n        if (this._state.missionIDX !== mission_idx) {\n            this._state.missionIDX = mission_idx;\n            this.emitEvent('mission', mission_idx);\n        }\n\n        return this.launchExercise(exercise_idx, true);\n    }\n\n    /**\n     * Показать введение в упражнение\n     *\n     * @returns {Promise<any>}\n     */\n    tourIntro(popovers) {\n        /// Если нет поповеров, выйти\n        if (!popovers) {return Promise.resolve()}\n\n        if (this._options.silent) {\n            return Promise.resolve();\n        }\n\n        /// Подключить поповер-обёртку\n        let intro = new TourWrapper(\"intro\", popovers);\n        /// Запустить интро\n        return intro.start();\n    }\n\n    /**\n     * Показать сообщение о прохождении упражнения\n     */\n    tourPass() {\n        let missionIDX = this._state.missionIDX;\n        let exerciseIDX = this._getExerciseIDX(missionIDX);\n\n        let message = this._lesson.missions[missionIDX].exercises[exerciseIDX].message_success;\n\n        this._checkLessonProgress(missionIDX);\n\n        /// Подключить поповер-обёртку\n        let intro = new TourWrapper(\"success\", message);\n        /// Запустить интро\n        return intro.start();\n    }\n\n    /**\n     * Показать сообщение о провале упражнения\n     *\n     * @param message\n     */\n    tourFault(message) {\n        message = message || \"Упражнение не пройдено\";\n        /// Подключить поповер-обёртку\n        let intro = new TourWrapper(\"error\", [{\n            intro: `<p>${message}`\n        }]);\n        /// Запустить интро\n        return intro.start();\n    }\n\n    /**\n     * Вывести диалоговое сообщение о подтверждении\n     *\n     * @param question_text\n     * @returns {Promise<any>} resolve, если ответ \"Да\", reject - если \"Нет\"\n     */\n    tourConfirm(question_text) {\n        let intro = new TourWrapper(\"dialog\", question_text);\n\n        return intro.start();\n    }\n\n    getExerciseCurrent() {\n        let missionIDX = this._state.missionIDX;\n        let exerciseIDX = this._getExerciseIDX(missionIDX);\n\n        return this._lesson.missions[missionIDX].exercises[exerciseIDX];\n    }\n\n    getExerciseID() {\n        let missionIDX = this._state.missionIDX;\n        let exerciseIDX = this._getExerciseIDX(missionIDX);\n\n        return this._lesson.missions[missionIDX].exercises[exerciseIDX].pk;\n    }\n\n    /**\n     * Обработать результат проверки упражнения\n     *\n     * @param verdict\n     */\n    applyVerdict(verdict) {\n        verdict.missionIDX = this._state.missionIDX;\n        verdict.exerciseIDX = this._state.missions[this._state.missionIDX].exerciseIDX;\n\n        if (verdict.status === API.STATUS_CODES.PASS) {\n            this.emitEvent('pass', verdict);\n        }\n\n        if (verdict.status === API.STATUS_CODES.FAULT) {\n            this.emitEvent('fault', {\n                message: verdict.html,\n                blocks: verdict.blocks\n            });\n        }\n    }\n\n    /**\n     * Проверить правильность нажатия клавиши\n     *\n     * @param code\n     * @returns {boolean}\n     */\n    validateButtonPress(code) {\n        if (typeof this._buttons_model === \"undefined\") {\n            return true;\n        }\n\n        /// если последовательность пустая, игнорировать\n        if (this._buttons_model.length === 0) {\n            /// задание пройдено\n            // this.emitEvent(\"pass\", {\n            //     missionIDX: this._state.missionIDX,\n            //     exerciseIDX: this._state.missions[this._state.missionIDX].exerciseIDX\n            // });\n            return true;\n        }\n\n        /// если код нажатой клавиши совпал с ожидаемым\n        if (code === this._buttons_model[this._state.buttonIDX]) {\n            /// если ожидаемый код - последний\n            if ((this._state.buttonIDX + 1) === this._buttons_model.length) {\n                /// сбросить позицию указателя\n                this._state.buttonIDX = 0;\n                /// задание пройдено\n                this.emitEvent('pass', {\n                    missionIDX: this._state.missionIDX,\n                    exerciseIDX: this._state.missions[this._state.missionIDX].exerciseIDX\n                });\n            } else {\n                /// увеличить позицию указателя\n                this._state.buttonIDX += 1;\n            }\n\n            return true;\n        }\n\n        /// сбросить позицию указателя, если код не совпал\n        this._state.buttonIDX = 0;\n\n        return false;\n    }\n\n    /**\n     * Установить эталонную последовательность нажатий клавиш\n     *\n     * @param {Array<number>} seq эталонная последовательность нажатий клавиш\n     * @private\n     */\n    setButtonsModel(seq) {\n        if (seq === null) {\n            seq = undefined;\n        }\n\n        this._buttons_model = seq;\n        this._state.buttonIDX = 0;\n\n        return Promise.resolve(true);\n    }\n\n    _checkLessonProgress(mission_idx) {\n        if (typeof mission_idx === \"undefined\") {return false}\n\n        if (this._state.missions[mission_idx].exerciseIDXLast < this._state.missions[mission_idx].exerciseIDX) {\n            this.emitEvent(\"progress\", {\n                missionIDX: mission_idx,\n                exerciseIDX: this._state.missions[mission_idx].exerciseIDX,\n                exerciseCount: this._state.missions[mission_idx].exerciseCount\n            });\n\n            this._state.missions[mission_idx].exerciseIDXLast = this._state.missions[mission_idx].exerciseIDX;\n        }\n    }\n\n    _getExerciseIDX(mission_idx) {\n        let exerciseIDX = this._state.missions[mission_idx].exerciseIDX;\n\n        /// если включён режим буксовки\n        if (this._state.missions[mission_idx].skidding) {\n            /// извлечь букосовчный индекс\n            exerciseIDX = this._state.missions[mission_idx].exerciseSkiddingIDX\n        }\n\n        return exerciseIDX;\n    }\n\n    /**\n     * Обработать данные урока и установить их в объект\n     *\n     * Происходит сброс данных прогресса\n     *\n     * @param lesson_data\n     * @private\n     */\n    _parseLesson(lesson_data) {\n        this._lesson = LessonPreprocessor.processLesson(lesson_data);\n\n        for (let mission of this._lesson.missions) {\n            /// заполнить данные прогресса\n            this._state.missions.push({\n                exerciseIDX: 0,\n                exerciseCount: mission.exercises.length,\n                exerciseIDXLast: -1,\n                skidding: false,\n                exerciseSkiddingIDX: undefined\n            });\n        }\n\n        console.log(this._lesson);\n    }\n\n    _subscribeToWrapperEvents() {\n        // stub\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/InstructorModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "API",
    "memberof": "js/modules/InstructorModule.js",
    "static": true,
    "longname": "js/modules/InstructorModule.js~API",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/InstructorModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"STATUS_CODES\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "class",
    "name": "InstructorModule",
    "memberof": "js/modules/InstructorModule.js",
    "static": true,
    "longname": "js/modules/InstructorModule.js~InstructorModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/InstructorModule.js",
    "importStyle": "InstructorModule",
    "description": "Модуль, отвечающий за отображение всплывающих подсказок.",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 253,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/InstructorModule.js~InstructorModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/InstructorModule.js~InstructorModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/InstructorModule.js~InstructorModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"lessonID\": number, \"silent\": *}"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "_lesson",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#_lesson",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "_buttons_model",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#_buttons_model",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "{\"missionIDX\": *, \"missions\": *, \"buttonIDX\": *}"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "getInitialLessonID",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#getInitialLessonID",
    "access": "public",
    "description": "Выдать ИД начального урока\n\nОпределяет номер урока в зависимости от входных данных\nмодуля",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<number>} ИД урока"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "lesson_id",
        "description": "(опционально) ИД урока"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<number>"
      ],
      "spread": false,
      "description": "ИД урока"
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "loadLesson",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#loadLesson",
    "access": "public",
    "description": "Загрузить урок в модуль\n\nПроисходит первичная обработка данных и установка указателей",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lesson_data",
        "description": "{object} JSON-пакет с данными урока"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "launchLesson",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#launchLesson",
    "access": "public",
    "description": "Запустить урок\n\nЗапускает урок с первго упражнения первой миссии",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "mission_idx",
        "types": [
          "*"
        ]
      },
      {
        "name": "exercise_idx",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "launchMissionNext",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#launchMissionNext",
    "access": "public",
    "description": "Запустить следующую миссию",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<object>|Promise<void>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<object>|Promise<void>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "launchExerciseNext",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#launchExerciseNext",
    "access": "public",
    "description": "Запустить следующее упражнение",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<object>|Promise<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "skid",
        "description": "режим \"буксовки\" - только переключить указатели"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<object>|Promise<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "launchMission",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#launchMission",
    "access": "public",
    "description": "Запустить миссию",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mission_idx",
        "description": "индекс миссии"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "launchExercise",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#launchExercise",
    "access": "public",
    "description": "Запустить упражнение",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "exercise_idx",
        "description": "индекс упражнения в текущей миссии"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "forced",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "forceExercise",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#forceExercise",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [
      {
        "name": "mission_idx",
        "types": [
          "*"
        ]
      },
      {
        "name": "exercise_idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "tourIntro",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#tourIntro",
    "access": "public",
    "description": "Показать введение в упражнение",
    "lineNumber": 267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "popovers",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "tourPass",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#tourPass",
    "access": "public",
    "description": "Показать сообщение о прохождении упражнения",
    "lineNumber": 284,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "tourFault",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#tourFault",
    "access": "public",
    "description": "Показать сообщение о провале упражнения",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "tourConfirm",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#tourConfirm",
    "access": "public",
    "description": "Вывести диалоговое сообщение о подтверждении",
    "lineNumber": 319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>} resolve, если ответ \"Да\", reject - если \"Нет\""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "question_text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": "resolve, если ответ \"Да\", reject - если \"Нет\""
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "getExerciseCurrent",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#getExerciseCurrent",
    "access": "public",
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "getExerciseID",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#getExerciseID",
    "access": "public",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "applyVerdict",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#applyVerdict",
    "access": "public",
    "description": "Обработать результат проверки упражнения",
    "lineNumber": 344,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "verdict",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "validateButtonPress",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#validateButtonPress",
    "access": "public",
    "description": "Проверить правильность нажатия клавиши",
    "lineNumber": 366,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "setButtonsModel",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#setButtonsModel",
    "access": "private",
    "description": "Установить эталонную последовательность нажатий клавиш",
    "lineNumber": 412,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "seq",
        "description": "эталонная последовательность нажатий клавиш"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "_checkLessonProgress",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#_checkLessonProgress",
    "access": "private",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "params": [
      {
        "name": "mission_idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "_getExerciseIDX",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#_getExerciseIDX",
    "access": "private",
    "description": null,
    "lineNumber": 437,
    "undocument": true,
    "params": [
      {
        "name": "mission_idx",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "_parseLesson",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#_parseLesson",
    "access": "private",
    "description": "Обработать данные урока и установить их в объект\n\nПроисходит сброс данных прогресса",
    "lineNumber": 457,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lesson_data",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/InstructorModule.js~InstructorModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/InstructorModule.js~InstructorModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": null,
    "lineNumber": 474,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "js/modules/LayoutModule.js",
    "content": "import Module from \"../core/Module\";\n\nrequire(\"jquery-ui/ui/widgets/resizable\");\nrequire(\"jquery-ui-bundle\");\nimport layout   from \"../../vendor/js/jquery.layout.js\";\n\n// console.log(\"JQR\", jQuery.easing);\n\nimport styles from \"../../css/layout.css\";\n\n/// jQuery Layout conflict fix\n(function ($){$.fn.selector = { split: function() { return \"\"; }};})(jQuery);\n\nconst ROOT_CLASS = \"ui-layout-container\";\n\n/**\n * DOM-идентификаторы панелей\n *\n * @const\n * @type {object}\n */\nconst PANE_IDS = {\n    MAIN_NORTH:     \"main-north\",\n    MAIN_CENTER:    \"main-center\",\n    MAIN_EAST:      \"main-east\",\n\n    EAST_NORTH:         \"east-north\",\n    EAST_CENTER_CENTER: \"east-center-center\",\n    EAST_CENTER_SOUTH:  \"east-center-south\",\n\n    EAST_SOUTH:     \"east-south\"\n};\n\n\n/**\n * Режимы разметки\n *\n * @const\n * @type {object}\n */\nconst MODES = {\n    FULL:   \"full\",\n    SIMPLE: \"simple\"\n};\n\n\n/**\n * Отображения \"назначение панели\" -> \"ID DOM-узла\" для режимов разметки\n *\n * @const\n * @type {object}\n */\nconst MAPPINGS = {\n    full: {\n        launch_buttons: PANE_IDS.MAIN_CENTER,\n        workspace: PANE_IDS.MAIN_CENTER,\n        breadboard: PANE_IDS.EAST_SOUTH,\n        tracing: PANE_IDS.EAST_CENTER_CENTER,\n        buttons: PANE_IDS.EAST_CENTER_SOUTH,\n        task: PANE_IDS.EAST_NORTH,\n        lesson: PANE_IDS.MAIN_NORTH\n    },\n    simple: {\n        launch_buttons: PANE_IDS.MAIN_CENTER,\n        breadboard: PANE_IDS.MAIN_CENTER,\n        task: PANE_IDS.EAST_CENTER_CENTER,\n        lesson: PANE_IDS.MAIN_NORTH\n    }\n};\n\n/**\n * Элементы режимов разметки, которые должны быть проигнорированы\n * при анимации перехода между режимами\n *\n * @const\n * @type {{full: *[string], simple: *[string]}}\n */\nconst FADEBLOCKINGS = {\n    full: [\n        PANE_IDS.MAIN_EAST,\n        PANE_IDS.MAIN_NORTH,\n        PANE_IDS.EAST_NORTH,\n        PANE_IDS.EAST_CENTER_SOUTH,\n    ],\n    simple: [\n        PANE_IDS.MAIN_EAST,\n        PANE_IDS.MAIN_NORTH,\n        PANE_IDS.EAST_NORTH,\n        PANE_IDS.EAST_CENTER_SOUTH,\n    ]\n};\n\n/**\n * Начальная задержка\n *\n * Используется для устранения вероятных коллизий\n * при частой смене режимов разметки\n *\n * @const\n * @type {number}\n */\nconst DURATION_INITIAL = 0;\n\n/**\n * Модуль автоматической разметки страницы\n *\n * Автоматически распределяет зоны среды\n * и задаёт параметры их отображения\n *\n * @class\n * @classdesc APPROVED, STRESS-TESTED ON THROTTLED CPU\n */\nexport default class LayoutModule extends Module {\n    static get eventspace_name() {return \"lay\"}\n    static get event_types() {return [\"compose-begin\", \"compose-end\", \"resize\"]}\n\n    static defaults() {\n        return {\n            animSpeedMain: 500,     // скорость анимации главных элементов\n            animSpeedSub: 100,      // скорость анимации мелких элементов\n            animSpeedFade: 200,     // скорость анимации перехода\n            delayBeforeEnd: 100     // задержка для прогрузки внутренностей\n        }\n    }\n\n    /**\n     * @constructor\n     * @param options Настройки модуля\n     */\n    constructor(options) {\n        super(options);\n\n        this._state = {\n            mode: MODES.FULL,\n            transitionActive: false,\n            transitionDummy: false,\n            buttonsPaneVisible: true,\n            firstLaunch: true\n        };\n\n        this._layout_options = this._getFullLayout();\n\n        this._layout = $(\".\" + ROOT_CLASS).layout(this._layout_options);\n\n        this._panes = this._getPanes();\n\n        this._busy = false;\n        this._resizing = false;\n\n        if (!this._options.animSpeedFade) {\n            this._options.delayBeforeEnd = 0;\n        }\n    }\n\n    /**\n     * Скомпоновать разметку страницы\n     *\n     * @param mode {string} режим компоновки\n     */\n    compose(mode) {\n        if (!(mode in MAPPINGS)) {\n            throw new RangeError(\"There are no layout mode named `\" + mode + \"` in mappings\");\n        }\n\n        return new Promise(resolve => {\n            /// определить DOM-узлы компоновки\n            let nodes = this._transformMappingToNodes(MAPPINGS[mode]);\n\n            /// начальная продолжительность\n            let duration = DURATION_INITIAL;\n\n            /// если в данный момент идёт работа, отклонить\n            if (this._busy) {\n                return;\n            }\n\n            /// если уже в нужном режиме\n            if (this._state.mode === mode) {\n                /// занято\n                this._busy = true;\n                setTimeout(() => {\n                    /// сообщить о готовности компоновки\n                    if (this._state.firstLaunch && mode === MODES.FULL) {\n                        this.emitEvent(\"compose-end\", nodes);\n                    }\n                    /// разрешить вызов функции\n                    this._busy = false;\n                    /// разрешить выполнение следующей инструкции вызывающей программы\n                    resolve();\n\n                    this._state.firstLaunch = false;\n                }, duration);\n\n                return;\n            }\n\n            /// если режим нужно сменить, занято\n            this._busy = true;\n\n            /// если задана скорость анимации появления/исчезновения содержимого панелей\n            if (this._options.animSpeedFade) {\n                /// увеличить задержку\n                duration += this._options.animSpeedFade;\n                /// скрыть содержимое панелей\n                this.hidePanes(this._state.mode);\n            }\n\n            /// сообщить о готовности начать компоновку\n            setTimeout(() => {\n                this.emitEvent(\"compose-begin\", nodes);\n            }, duration);\n\n            /// если западная панель не раскрыта, раскрыть\n            this._layout.open(\"east\");\n\n            /// в зависимости от режима, в который нужно перейти\n            switch (mode) {\n                case MODES.SIMPLE: {\n                    this._panes.east.hide(\"north\");\n                    duration += this._options.animSpeedSub;\n\n                    this._panes.east.hide(\"south\");\n                    duration += this._options.animSpeedSub;\n\n                    this._layout.sizePane(\"east\", .4);\n                    duration += this._options.animSpeedMain;\n\n                    if (this._state.buttonsPaneVisible) {\n                        this._panes._east.center.hide(\"south\");\n                        duration += this._options.animSpeedSub;\n                    }\n\n                    break;\n                }\n                case MODES.FULL: {\n                    this._panes.east.show(\"north\");\n                    duration += this._options.animSpeedSub;\n\n                    this._panes.east.show(\"south\");\n                    duration += this._options.animSpeedSub;\n\n                    this._layout.sizePane(\"east\", .3);\n                    duration += this._options.animSpeedMain;\n\n                    if (this._state.buttonsPaneVisible) {\n                        this._panes._east.center.show(\"south\");\n                        duration += this._options.animSpeedSub;\n                    }\n\n                    break;\n                }\n                default: {\n                    throw new TypeError(\"Mode \" + mode + \"is not supported\");\n                }\n            }\n\n            this._state.mode = mode;\n\n            /// задержка для анимации смены разметки\n            setTimeout(() => {\n                /// сообщить о готовности компоновки\n                this.emitEvent(\"compose-end\", nodes);\n                /// задержка для анимации появления панелей\n                setTimeout(() => {\n                    /// разрешить вызов функции\n                    this._busy = false;\n                    /// разрешить выполнение следующей инструкции вызывающей программы\n                    resolve();\n                    this.showPanes();\n                }, this._options.animSpeedFade); // задержка для анимации появления панелей\n            }, duration); // задержка для анимации смены разметки\n\n            this._state.firstLaunch = false;\n        });\n    }\n\n    /**\n     * Переключить панель, отображающую нажатые кнопки\n     *\n     * @param on\n     * @returns {Promise<any>}\n     */\n    switchButtonsPane(on) {\n        return new Promise(resolve => {\n            if (on === this._state.buttonsPaneVisible || this._state.mode === MODES.SIMPLE) {\n                resolve();\n                return;\n            }\n\n            let duration = DURATION_INITIAL;\n\n            if (on) {\n                this._state.buttonsPaneVisible = true;\n\n                this._panes._east.center.show(\"south\");\n                duration += this._options.animSpeedSub;\n            } else {\n                this._state.buttonsPaneVisible = false;\n\n                this._panes._east.center.hide(\"south\");\n                duration += this._options.animSpeedSub;\n            }\n\n            setTimeout(() => {\n                resolve();\n            }, duration);\n        });\n    }\n\n    /**\n     * Скрыть панели\n     *\n     * Вызывается при смене режимов разметки\n     *\n     * @param {string} mode     режим разметки, из которого необходимо выйти\n     * @private\n     */\n    hidePanes(mode) {\n        for (let pane_id of Object.values(PANE_IDS)) {\n            if (FADEBLOCKINGS[mode].indexOf(pane_id) >= 0) {\n                continue;\n            }\n\n            if (Object.values(MAPPINGS[mode]).indexOf(pane_id) >= 0) {\n                $(\"#\" + pane_id).animate({opacity: 0}, this._options.animSpeedFade)\n            } else {\n                $(\"#\" + pane_id).animate({opacity: 0}, 0)\n            }\n        }\n    }\n\n    /**\n     * Показать панели\n     *\n     * Вызывается при смене режимов разметки\n     *\n     * @private\n     */\n    showPanes() {\n        return new Promise(resolve => {\n            for (let pane_id of Object.values(PANE_IDS)) {\n                $(\"#\" + pane_id).animate({opacity: 1}, this._options.animSpeedFade)\n            }\n\n            setTimeout(() => {resolve()}, this._options.animSpeedFade);\n        });\n    }\n\n    revealTopPane() {\n        this._layout.sizePane('north', 80);\n    }\n\n    concealTopPane() {\n        this._layout.sizePane('north', 55);\n    }\n\n    /**\n     * Преобразовать соответствия \"ID области\" -> \"ID DOM-узла области\"\n     * в соответствия \"ID области\" -> \"DOM-узел области\"\n     *\n     * @param map {Object}  Соответствия \"ID области\" -> \"ID DOM-узла области\"\n     * @returns {Object}    Соответствия \"ID области\" -> \"DOM-узел области\"\n     * @private\n     */\n    _transformMappingToNodes(map) {\n        let nodes = {};\n\n        for ([k, node_id] of Object.entries(map)) {\n            nodes[k] = document.getElementById(node_id);\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Обработать событие \"изменение размера\"\n     *\n     * @private\n     */\n    _onResize() {\n        if (!this._busy && !this._resizing) {\n            this._resizing = true;\n\n            if (this._state.mode === \"simple\") {\n                this._layout.sizePane(\"east\", .4);\n            }\n\n            if (this._state.mode === \"full\") {\n                this._layout.sizePane(\"east\", .3);\n            }\n\n            setTimeout(() => {\n                this._resizing = false;\n            }, this._options.animSpeedMain);\n        }\n\n        this.emitEvent(\"resize\");\n    }\n\n    /**\n     * Получить полную разметку\n     *\n     * Метод используется для сокрытия большого объекта из конструктора\n     *\n     * @returns {object}\n     * @private\n     */\n    _getFullLayout() {\n        return {\n            closable: true,\t    // pane can open & close\n            resizable: true,\t// when open, pane can be resized\n            slidable: true,\t    // when closed, pane can 'slide' open over other panes - closes on mouse-out\n            // livePaneResizing: true,\n            fxSpeed: this._options.animSpeedMain,\n            // resizeWhileDragging: true,\n\n            fxName:     \"slide\",\n            fxSettings: { duration: this._options.animSpeedMain, easing: \"easeInOutCirc\" },\n            fxSettings_open: { duration: this._options.animSpeedMain, easing: \"easeOutCirc\" },\n            fxSettings_close: { duration: this._options.animSpeedMain, easing: \"easeOutCirc\" },\n\n            // fxSpeed_size: 1000,\n\n            animatePaneSizing: true,\n            onresize: () => {try {this._onResize()} catch (e) {console.error(e)}},\n\n            //\tsome resizing/toggling settings\n            north: {\n                slidable: false,\t            // OVERRIDE the pane-default of 'slidable=true'\n                closable: false,\n                spacing_closed: 20,\t\t        // big resizer-bar when open (zero height)\n                size: 55,\n                // maxSize: 100\n            },\n\n            center: {\n            },\n\n            //\tsome pane-size settings\n            east: {\n                size: .4,\n                // maxSize: 400,\n\n                livePaneResizing: true,\n                resizable: true,\n\n                fxSpeed: this._options.animSpeedMain,\n\n                onresize: () => {try {this._onResize('east')} catch (e) {console.error(e)}},\n\n                childOptions: {\n                    north: {\n                        size: .3,\n\n                        resizable: true,\n                        fxSpeed: this._options.animSpeedSub,\n                        onresize: () => {try {this._onResize()} catch (e) {console.error(e)}},\n                    },\n                    south: {\n                        size: .3,\n\n                        resizable: true,\n                        fxSpeed: this._options.animSpeedSub,\n                        onresize: () => {try {this._onResize()} catch (e) {console.error(e)}},\n                    },\n                    center: {\n                        childOptions: {\n                            center: {\n                                spacing_open: 0,\n                                spacing_closed: 0,\n\n                                resizable: true,\n                                onresize: () => {try {this._onResize()} catch (e) {console.error(e)}},\n                            },\n                            south: {\n                                size: .2,\n                                minSize: 35,\n                                maxSize: 45,\n                                spacing_open: 0,\n                                spacing_closed: 0,\n                                slidable: false,\n                                closable: false,\n                                onresize: () => {try {this._onResize()} catch (e) {console.error(e)}},\n                            }\n                        }\n                    }\n                }\n            },\n        };\n    }\n\n    /**\n     * Получить ссылки на панели jQuery UI Layouts\n     *\n     * Метод используется упрощённого доступа к элементам разметки\n     *\n     * @returns {object}\n     * @private\n     */\n    _getPanes() {\n        return {\n            north: this._layout.north,\n            center: this._layout.center,\n            east: this._layout.east.children.layout1,\n\n            _east: {\n                north:  this._layout.east.children.layout1.north,\n                south:  this._layout.east.children.layout1.south,\n                center: this._layout.east.children.layout1.center.children.layout1,\n\n                _center: {\n                    center: this._layout.east.children.layout1.center.children.layout1.center,\n                    south:  this._layout.east.children.layout1.center.children.layout1.south,\n                }\n            }\n        }\n    }\n\n\n    _subscribeToWrapperEvents() {\n        // No events\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/LayoutModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "ROOT_CLASS",
    "memberof": "js/modules/LayoutModule.js",
    "static": true,
    "longname": "js/modules/LayoutModule.js~ROOT_CLASS",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/LayoutModule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "PANE_IDS",
    "memberof": "js/modules/LayoutModule.js",
    "static": true,
    "longname": "js/modules/LayoutModule.js~PANE_IDS",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/LayoutModule.js",
    "importStyle": null,
    "description": "DOM-идентификаторы панелей",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "MODES",
    "memberof": "js/modules/LayoutModule.js",
    "static": true,
    "longname": "js/modules/LayoutModule.js~MODES",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/LayoutModule.js",
    "importStyle": null,
    "description": "Режимы разметки",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "MAPPINGS",
    "memberof": "js/modules/LayoutModule.js",
    "static": true,
    "longname": "js/modules/LayoutModule.js~MAPPINGS",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/LayoutModule.js",
    "importStyle": null,
    "description": "Отображения \"назначение панели\" -> \"ID DOM-узла\" для режимов разметки",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "name": "FADEBLOCKINGS",
    "memberof": "js/modules/LayoutModule.js",
    "static": true,
    "longname": "js/modules/LayoutModule.js~FADEBLOCKINGS",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/LayoutModule.js",
    "importStyle": null,
    "description": "Элементы режимов разметки, которые должны быть проигнорированы\nпри анимации перехода между режимами",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{full: *[string], simple: *[string]}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "name": "DURATION_INITIAL",
    "memberof": "js/modules/LayoutModule.js",
    "static": true,
    "longname": "js/modules/LayoutModule.js~DURATION_INITIAL",
    "access": "public",
    "export": false,
    "importPath": "codehour-breadboard-web/js/modules/LayoutModule.js",
    "importStyle": null,
    "description": "Начальная задержка\n\nИспользуется для устранения вероятных коллизий\nпри частой смене режимов разметки",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "class",
    "name": "LayoutModule",
    "memberof": "js/modules/LayoutModule.js",
    "static": true,
    "longname": "js/modules/LayoutModule.js~LayoutModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/LayoutModule.js",
    "importStyle": "LayoutModule",
    "description": "Модуль автоматической разметки страницы\n\nАвтоматически распределяет зоны среды\nи задаёт параметры их отображения",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@classdesc",
        "tagValue": "APPROVED, STRESS-TESTED ON THROTTLED CPU"
      }
    ],
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 291,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LayoutModule.js~LayoutModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LayoutModule.js~LayoutModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LayoutModule.js~LayoutModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"animSpeedMain\": number, \"animSpeedSub\": number, \"animSpeedFade\": number, \"delayBeforeEnd\": number}"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 130,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Настройки модуля"
      }
    ]
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "type": {
      "types": [
        "{\"mode\": *, \"transitionActive\": *, \"transitionDummy\": *, \"buttonsPaneVisible\": boolean, \"firstLaunch\": boolean}"
      ]
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "_layout_options",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_layout_options",
    "access": "private",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "_layout",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_layout",
    "access": "private",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "_panes",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_panes",
    "access": "private",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "_busy",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_busy",
    "access": "private",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "_resizing",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_resizing",
    "access": "private",
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "compose",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#compose",
    "access": "public",
    "description": "Скомпоновать разметку страницы",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "{string} режим компоновки"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "switchButtonsPane",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#switchButtonsPane",
    "access": "public",
    "description": "Переключить панель, отображающую нажатые кнопки",
    "lineNumber": 283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<any>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "on",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<any>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "hidePanes",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#hidePanes",
    "access": "private",
    "description": "Скрыть панели\n\nВызывается при смене режимов разметки",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "режим разметки, из которого необходимо выйти"
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "showPanes",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#showPanes",
    "access": "private",
    "description": "Показать панели\n\nВызывается при смене режимов разметки",
    "lineNumber": 339,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "revealTopPane",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#revealTopPane",
    "access": "public",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "concealTopPane",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#concealTopPane",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "_transformMappingToNodes",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_transformMappingToNodes",
    "access": "private",
    "description": "Преобразовать соответствия \"ID области\" -> \"ID DOM-узла области\"\nв соответствия \"ID области\" -> \"DOM-узел области\"",
    "lineNumber": 365,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}    Соответствия \"ID области\" -> \"DOM-узел области\""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": "{Object}  Соответствия \"ID области\" -> \"ID DOM-узла области\""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Соответствия \"ID области\" -> \"DOM-узел области\""
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "_onResize",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_onResize",
    "access": "private",
    "description": "Обработать событие \"изменение размера\"",
    "lineNumber": 380,
    "params": [],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "_getFullLayout",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_getFullLayout",
    "access": "private",
    "description": "Получить полную разметку\n\nМетод используется для сокрытия большого объекта из конструктора",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "_getPanes",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_getPanes",
    "access": "private",
    "description": "Получить ссылки на панели jQuery UI Layouts\n\nМетод используется упрощённого доступа к элементам разметки",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/LayoutModule.js~LayoutModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LayoutModule.js~LayoutModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": null,
    "lineNumber": 520,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "js/modules/LocalServiceModule.js",
    "content": "import Module from '../core/Module';\n\nimport SocketWrapper from '../wrappers/SocketWrapper';\nimport ElectronIPCWrapper from '../wrappers/ElectronIPCWrapper';\n\n/**\n * Модуль взаимодействия с локальным сервисом\n *\n * Работает в двух режимах:\n *      - Electron IPC (при запуске в среде Electron)\n *      - Socket.IO (при запуске в браузере)\n */\nexport default class LocalServiceModule extends Module {\n// public:\n\n    static get eventspace_name()    {return \"ls\"}\n    static get event_types()        {return [\n        \"connect\", \"disconnect\", \"command\", \"variable\",\n        \"terminate\", \"plates\", \"currents\", \"board-status\", \"timeout\", \"error\"\n    ]};\n\n    static defaults() {\n        return {\n            modeDummy: false,       // холостой режим\n            connectTimeout: 5000,   // время в мс, через которое запустится проверка подключения сервиса\n            portUrgent: false,\n        }\n    }\n\n    constructor(options) {\n        super(options);\n\n        this._ipc = undefined;\n\n        this._version = undefined;\n\n        this._state = {\n            connected: false,\n            board_status: undefined,\n        };\n\n        /// если режим холостой\n        if (this._options.modeDummy) {\n            this._debug.log('Working in DUMMY mode');\n\n            setTimeout(() => {\n                this.emitEvent(\"connect\");\n                this.emitEvent(\"board-status\", \"connect\");\n            }, 1000);\n\n        } else {\n            if (this._options.portUrgent) {\n                this.resetPort(this._options.portUrgent);\n            }\n\n            this._launchIPC();\n            this._subscribeToWrapperEvents();\n        }\n    }\n\n    getBoardStatus() {\n        return this._state.board_status;\n    }\n\n    openMenu() {\n        if (this._options.modeDummy) {\n            return new Promise(resolve => resolve())\n        }\n\n        return new Promise(resolve => {\n            this._ipc.send('menu');\n\n            resolve();\n        });\n    }\n\n    resetPort(port) {\n        if (!port) throw new TypeError(\"Parameter `port` is not defined\");\n\n        if (this._options.modeDummy) {\n            return new Promise(resolve => resolve())\n        }\n\n        return new Promise(resolve => {\n            this.emitEvent(\"board-status\", \"search\");\n            this._ipc.send('reset-port', port);\n\n            this._ipc.once('reset-port.result', (event, error) => {\n                if (error) {\n                    this.emitEvent(\"board-status\", \"disconnect\");\n                    this._debug.error(error);\n                } else {\n                    this._debug.info(\"Connected to\", port);\n                    this.emitEvent(\"board-status\", \"connect\");\n\n                    resolve();\n                }\n           });\n        });\n    }\n\n    /**\n     * Обновить код на плате\n     *\n     * @param {Object} handlers обработчики, формат:\n     *                          {\n     *                              commands: \"<код обработчика>\",\n     *                              execute: \"<флаг запуска>\"\n     *                           }\n     *\n     *                           Для главного обработчика ID = main, key = \"None\"\n     */\n    updateHandlers(handlers) {\n        if (this._options.modeDummy) {\n            this.emitEvent(\"terminate\");\n            return new Promise(resolve => resolve())\n        }\n\n        return new Promise(resolve => {\n            console.log(handlers);\n\n            this._ipc.send('code-update', handlers);\n\n            this._ipc.once('code-update.result', (event, error) => {\n                if (error) {\n                   this._debug.error(error);\n                   throw error;\n                } else {\n                   resolve();\n                }\n           });\n        });\n    }\n\n    /**\n     * Зарегистрировать нажатие клавиши\n     *\n     * @param button_code   код клавиши\n     * @deprecated\n     * @returns {boolean}   true, если модуль в холостом режиме\n     */\n    registerKeyUp(button_code) {\n        if (this._options.modeDummy) {return true}\n\n        this._ipc.send('keyup', button_code);\n    }\n\n    /**\n     * Остановить выполнение программы\n     *\n     * @returns {boolean}   true, если модуль в холостом режиме\n     */\n    stopExecution() {\n        if (this._options.modeDummy) {return true}\n\n        this._ipc.send('stop');\n    }\n\n    /**\n     * Обновить прошивку платы по указанной ссылке\n     *\n     * @param {Array} urls массив ссылок на файлы прошивки\n     */\n    firmwareUpgrade(urls) {\n        if (this._options.modeDummy) {return new Promise(resolve => resolve())}\n\n        return new Promise(resolve => {\n            this._ipc.send('upgrade', urls);\n\n            this._ipc.once('upgrade.result', (event, error) => {\n                if (error) {\n                    this._debug.error(error);\n                    throw error;\n                } else {\n                    this._debug.info('Firmware upgraded successfully');\n                    resolve();\n                }\n            });\n        });\n    }\n\n    setMode(mode) {\n        if (this._options.modeDummy) {return true}\n\n        this._ipc.send('set-mode', mode);\n    }\n\n    /**\n     * Запустить механизм межпроцессной коммуникации\n     *\n     * @private\n     */\n    _launchIPC() {\n        if (this._options.modeDummy) {return true}\n\n        if (window && window.process && window.process.type) {\n            this._debug.log(\"Swtiching on IPCWrapper\");\n            this._ipc = new ElectronIPCWrapper();\n        } else {\n            this._debug.log(\"Swtiching on SocketWrapper\");\n            this._ipc = new SocketWrapper();\n        }\n\n        this._ipc.send('connect');\n\n        this._checkConnection();\n    }\n\n    /**\n     * Проверить установление соединения\n     *\n     * Проверка срабатывает через время, указанное в опциях модуля\n     *\n     * Результат проверки зависит от значения внутренней переменной состояния [[connected]]\n     *\n     * @private\n     */\n    _checkConnection() {\n        if (!this._options.connectTimeout) {return}\n\n        setTimeout(() => {\n            if (this._state.connected === false) {\n                this.emitEvent(\"timeout\");\n            }\n        }, this._options.connectTimeout)\n    }\n\n    /**\n     * @inheritDoc\n     * @private\n     */\n    _subscribeToWrapperEvents() {\n        /* Как только сервис сообщил о соединении */\n        this._ipc.on('connect', (evt, version) => {\n            this._state.connected = true;\n            this.emitEvent('connect');\n            console.log(version);\n            this._debug.info(`Connected to IPC ver. ${version}`);\n            this._version = version;\n        });\n\n        /* Как только сервис сообщил о разъединении */\n        this._ipc.on('disconnect', () => {\n            this.emitEvent('disconnect');\n        });\n\n        this._ipc.on('board-search', () => {\n            this._state.board_status = 'search';\n            this.emitEvent('board-status', 'search');\n        });\n\n        this._ipc.on('board-connect', () => {\n            this._state.board_status = 'connect';\n            this.emitEvent('board-status', 'connect');\n        });\n\n        this._ipc.on('board-disconnect', () => {\n            this._state.board_status = 'disconnect';\n            this.emitEvent('board-status', 'disconnect');\n        });\n\n        /* Как только сервис сообщил об исполнении команды */\n        this._ipc.on('command', (evt, data) => {\n            this.emitEvent('command', data);\n        });\n\n        this._ipc.on('var_change', (evt, data) => {\n            this.emitEvent('variable', data);\n        });\n\n        /* Как только сервис сообщил о завершении исполнения кода */\n        this._ipc.on('terminate', (evt) => {\n            this.emitEvent('terminate');\n        });\n\n        this._ipc.on('draw_plates', (evt, data) => {\n           this.emitEvent('plates', data);\n        });\n\n        this._ipc.on('draw_currents', (evt, data) => {\n           this.emitEvent('currents', data);\n        });\n\n        /* Как только сервис сообщил об ошибке- */\n        this._ipc.on('error', (evt, err) => {\n            this._debug.error(err);\n            // this.emitEvent('error', arg)\n        });\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/LocalServiceModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "class",
    "name": "LocalServiceModule",
    "memberof": "js/modules/LocalServiceModule.js",
    "static": true,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/LocalServiceModule.js",
    "importStyle": "LocalServiceModule",
    "description": "Модуль взаимодействия с локальным сервисом\n\nРаботает в двух режимах:\n     - Electron IPC (при запуске в среде Electron)\n     - Socket.IO (при запуске в браузере)",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 320,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"modeDummy\": *, \"connectTimeout\": number, \"portUrgent\": *}"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "_ipc",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#_ipc",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "_version",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#_version",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"connected\": *, \"board_status\": *}"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "getBoardStatus",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#getBoardStatus",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "openMenu",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#openMenu",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "resetPort",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#resetPort",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "port",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "updateHandlers",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#updateHandlers",
    "access": "public",
    "description": "Обновить код на плате",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "handlers",
        "description": "обработчики, формат:\n                         {\n                             commands: \"<код обработчика>\",\n                             execute: \"<флаг запуска>\"\n                          }\n\n                          Для главного обработчика ID = main, key = \"None\""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "registerKeyUp",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#registerKeyUp",
    "access": "public",
    "description": "Зарегистрировать нажатие клавиши",
    "lineNumber": 142,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   true, если модуль в холостом режиме"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "button_code",
        "description": "код клавиши"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true, если модуль в холостом режиме"
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "stopExecution",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#stopExecution",
    "access": "public",
    "description": "Остановить выполнение программы",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}   true, если модуль в холостом режиме"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true, если модуль в холостом режиме"
    },
    "params": []
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "firmwareUpgrade",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#firmwareUpgrade",
    "access": "public",
    "description": "Обновить прошивку платы по указанной ссылке",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "urls",
        "description": "массив ссылок на файлы прошивки"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "setMode",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#setMode",
    "access": "public",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "params": [
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "_launchIPC",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#_launchIPC",
    "access": "private",
    "description": "Запустить механизм межпроцессной коммуникации",
    "lineNumber": 193,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "_checkConnection",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#_checkConnection",
    "access": "private",
    "description": "Проверить установление соединения\n\nПроверка срабатывает через время, указанное в опциях модуля\n\nРезультат проверки зависит от значения внутренней переменной состояния [[connected]]",
    "lineNumber": 218,
    "params": [],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/LocalServiceModule.js~LocalServiceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LocalServiceModule.js~LocalServiceModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": "",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@inheritDoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "file",
    "name": "js/modules/LogModule.js",
    "content": "import Module from '../core/Module';\n\nimport IdentifierWrapper from \"../wrappers/IdentifierWrapper\";\n\n/**\n * Модуль логирования\n *\n * Сортирует и фильтрует лог-записи.\n * Отвечает за своевременный сбор логов\n */\nexport default class LogModule extends Module {\n// public:\n\n    static get eventspace_name()    {return \"log\"}\n    static get event_types()        {return [\"tick\", \"error\"]}\n\n    static defaults() {\n        return {\n            modeDummy: false,\n            tickerInterval: 15000\n        }\n    }\n\n    constructor(options) {\n        super(options);\n\n        this._state = {\n            auto: true\n        };\n\n        this._client_data = {};\n\n        if (this._options.modeDummy) {\n            this._debug.log('Working in DUMMY mode');\n        } else {\n            this._collectClientData();\n            this.runTicker(true);\n        }\n    }\n\n    /**\n     * Собрать пакет логов\n     *\n     * В пакет включаются данные клиента и сами логи\n     *\n     * TODO: обработка логов - фильтрация по разным уровням логирования\n     *\n     * @param logs\n     * @returns {{userData: {}|*, logs: *}}\n     */\n    collectLogs(logs) {\n        if (this._options.modeDummy) {return true}\n\n        return new Promise(resolve => {\n            resolve({\n                userData: this._client_data,\n                logs:     logs\n            });\n        });\n    }\n\n    /**\n     * Запустить повторяющийся таймер\n     * для периодического сбора лог-записей\n     *\n     * @param auto {boolean} включить таймер / авто-режим\n     * @returns {boolean} true, если модуль в холостом режиме\n     */\n    runTicker(auto=true) {\n        if (this._options.modeDummy) {return true}\n\n        if (!auto) {\n            this._state.auto = false;\n        }\n\n        setTimeout(() => {\n            if (this._state.auto) {\n                /// emit tick event but only if no onbeforeupload external event happened\n                this.emitEvent(\"tick\");\n            }\n        }, this._options.tickerInterval);\n    }\n\n    /**\n     * Собрать данные о клиенте\n     *\n     * Данные включаются в каждый лог-пакет для идентификации клиента пользователя\n     *\n     * @returns {boolean} true, если режим холостой\n     * @private\n     */\n    _collectClientData() {\n        if (this._options.modeDummy) {return true}\n\n        let identifier = new IdentifierWrapper();\n\n        this._client_data = {\n            fingerprint:    identifier.fingerprint,\n            userAgent:      identifier.userAgent,\n            browser:        identifier.browser,\n            browserVersion: identifier.browserVersion,\n            os:             identifier.OS,\n            osVersion:      identifier.OSVersion,\n            clientVersion:  \"0.0.1\"\n        }\n    }\n\n     /**\n     * @inheritDoc\n     * @private\n     */\n    _subscribeToWrapperEvents() {\n\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/LogModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 342,
    "kind": "class",
    "name": "LogModule",
    "memberof": "js/modules/LogModule.js",
    "static": true,
    "longname": "js/modules/LogModule.js~LogModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/LogModule.js",
    "importStyle": "LogModule",
    "description": "Модуль логирования\n\nСортирует и фильтрует лог-записи.\nОтвечает за своевременный сбор логов",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 343,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LogModule.js~LogModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LogModule.js~LogModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/LogModule.js~LogModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"modeDummy\": *, \"tickerInterval\": number}"
      ]
    }
  },
  {
    "__docId__": 346,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LogModule.js~LogModule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/LogModule.js~LogModule",
    "static": false,
    "longname": "js/modules/LogModule.js~LogModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"auto\": boolean}"
      ]
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "_client_data",
    "memberof": "js/modules/LogModule.js~LogModule",
    "static": false,
    "longname": "js/modules/LogModule.js~LogModule#_client_data",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "collectLogs",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LogModule.js~LogModule#collectLogs",
    "access": "public",
    "description": "Собрать пакет логов\n\nВ пакет включаются данные клиента и сами логи\n\nTODO: обработка логов - фильтрация по разным уровням логирования",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{userData: {}|*, logs: *}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "logs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{userData: {}|*, logs: *}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "runTicker",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LogModule.js~LogModule#runTicker",
    "access": "public",
    "description": "Запустить повторяющийся таймер\nдля периодического сбора лог-записей",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true, если модуль в холостом режиме"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "auto",
        "description": "{boolean} включить таймер / авто-режим"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true, если модуль в холостом режиме"
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "_collectClientData",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LogModule.js~LogModule#_collectClientData",
    "access": "private",
    "description": "Собрать данные о клиенте\n\nДанные включаются в каждый лог-пакет для идентификации клиента пользователя",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true, если режим холостой"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true, если режим холостой"
    },
    "params": []
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/LogModule.js~LogModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/LogModule.js~LogModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": "",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@inheritDoc",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "js/modules/TracingModule.js",
    "content": "import Module from \"../core/Module\";\nimport BlocklyWrapper from \"../wrappers/BlocklyWrapper\";\nimport KbdPaneWrapper from \"../wrappers/KbdPaneWrapper\";\n\nimport JSONBlocks       from '../utils/blockly/extras/blocks';\n\n/**\n * Модуль, отвечающий за поведение области трассировки кода\n *\n * Например:\n * Текущие переменные\n * История выполняемых команд\n */\nexport default class TracingModule extends Module {\n    static get eventspace_name() {return \"trc\"}\n    static get event_types() {return []}\n\n    static defaults() {\n        return {\n\n        }\n    }\n\n    constructor(options) {\n        super(options);\n\n        this._state = {\n            areasDisp: {\n                blocks: false,\n                buttons: false\n            },\n        };\n\n        this._vars = [];\n\n        this._blockly = new BlocklyWrapper();\n        this._kbdpane = new KbdPaneWrapper();\n\n        this._subscribeToWrapperEvents();\n    }\n\n    injectBlocks(dom_node) {\n        return new Promise(resolve => {\n            if (!dom_node) {\n                resolve(false);\n                return\n            }\n\n            if (BlocklyWrapper.BLOCKLY_BLOCK_TYPES_REGISTERED === false) {\n                throw new Error(\"Please modify this module to load Blockly block types or disable it\");\n            }\n\n            if (this._state.areasDisp.blocks) {\n                resolve(true);\n                return;\n            }\n\n            this._blockly.inject(dom_node, false, true, 0.8);\n\n            this._showVariables(this._vars);\n\n            this._state.areasDisp.blocks = true;\n            resolve(true);\n        });\n    }\n\n    ejectBlocks() {\n        return new Promise(resolve => {\n            if (!this._state.areasDisp.blocks) {\n                resolve(true);\n                return;\n            }\n\n            this._blockly.clearVariableBlocks();\n            this._blockly.eject();\n\n            this._state.areasDisp.blocks = false;\n\n            resolve(true);\n        })\n    }\n\n    injectButtons(dom_node_buttons) {\n        return new Promise(resolve => {\n            if (!dom_node_buttons) {\n                resolve(true);\n                return;\n            }\n\n            if (this._state.areasDisp.buttons) {\n                resolve(true);\n                return;\n            }\n\n            this._state.areasDisp.buttons = true;\n\n            this._kbdpane.include(dom_node_buttons, 10);\n\n            resolve(true);\n        });\n    }\n\n    ejectButtons() {\n        return new Promise(resolve => {\n            if (!this._state.areasDisp.buttons) {\n                resolve(true);\n                return;\n            }\n\n            this._kbdpane.exclude();\n            this._state.areasDisp.buttons = false;\n\n            resolve(true);\n        });\n    }\n\n    resize() {\n        if (this._state.areasDisp.blocks) {\n            this._blockly._onResize();\n        }\n\n        if (this._state.areasDisp.buttons) {\n            this._kbdpane._onResize();\n        }\n    }\n\n    registerVariables(variables) {\n        if (typeof variables === \"undefined\") {return false}\n\n        this._vars = variables;\n\n        if (!this._state.areasDisp.blocks) {return true}\n\n        this._blockly.clearVariableBlocks();\n\n        if (this._vars.length > 0) {\n            this._showVariables(this._vars);\n        }\n    }\n\n    setVariableValue(variable_type, variable_value) {\n        this._blockly.setVariableBlockValue(variable_type, variable_value);\n    }\n\n    displayKeyboardPress(keycode, fault=false) {\n        if (!this._state.areasDisp.buttons) {return true}\n\n        this._kbdpane.addButton(keycode, fault);\n    }\n\n    switchVariables(on) {\n        if (this._state.areasDisp.blocks === on) {return true}\n\n        if (on === false) {\n            this._blockly.clearVariableBlocks();\n        } else {\n            this._showVariables(this._vars);\n        }\n\n        this._state.variable = on;\n    }\n\n    switchCodenet(on) {\n        if (this._state.areasDisp.blocks === on) {return true}\n    }\n\n    switchButtons(on) {\n        if (this._state.areasDisp.buttons === on) {return true}\n    }\n\n    clearButtons() {\n        if (!this._state.areasDisp.buttons) {\n            return Promise.resolve(false)\n        }\n\n        this._kbdpane.clear();\n\n        return Promise.resolve(true);\n    }\n\n    _showVariables(variables) {\n        for (let variable of variables) {\n            this._blockly.addVariableBlock(variable.name, variable.type, variable.initial_value);\n        }\n    }\n\n    _subscribeToWrapperEvents() {\n        // stub\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/TracingModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "class",
    "name": "TracingModule",
    "memberof": "js/modules/TracingModule.js",
    "static": true,
    "longname": "js/modules/TracingModule.js~TracingModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/TracingModule.js",
    "importStyle": "TracingModule",
    "description": "Модуль, отвечающий за поведение области трассировки кода\n\nНапример:\nТекущие переменные\nИстория выполняемых команд",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 356,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/TracingModule.js~TracingModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/TracingModule.js~TracingModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/TracingModule.js~TracingModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "{\"areasDisp\": *}"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "_vars",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#_vars",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "_blockly",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#_blockly",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "_kbdpane",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#_kbdpane",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "injectBlocks",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#injectBlocks",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "dom_node",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "ejectBlocks",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#ejectBlocks",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "injectButtons",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#injectButtons",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "dom_node_buttons",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "ejectButtons",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#ejectButtons",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "resize",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#resize",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "registerVariables",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#registerVariables",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "variables",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "setVariableValue",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#setVariableValue",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "variable_type",
        "types": [
          "*"
        ]
      },
      {
        "name": "variable_value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "displayKeyboardPress",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#displayKeyboardPress",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "keycode",
        "types": [
          "*"
        ]
      },
      {
        "name": "fault",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "switchVariables",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#switchVariables",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "on",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "switchCodenet",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#switchCodenet",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [
      {
        "name": "on",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "switchButtons",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#switchButtons",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "on",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "clearButtons",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#clearButtons",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "_showVariables",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#_showVariables",
    "access": "private",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "variables",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/TracingModule.js~TracingModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/TracingModule.js~TracingModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 379,
    "kind": "file",
    "name": "js/modules/WorkspaceModule.js",
    "content": "import Module from '../core/Module'\n\nimport BlocklyWrapper from '../wrappers/BlocklyWrapper'\n\nimport JSONBlocks       from '../utils/blockly/extras/blocks';\nimport JSONGenerators   from '../utils/blockly/extras/generators';\n\n/**\n * Модуль \"Рабочая область\"\n *\n * Предоставляет набор методов для управления интерфейсом Blockly\n */\nexport default class WorkspaceModule extends Module {\n    static get eventspace_name() {return \"ws\"}\n    static get event_types() {return [\"ready\", \"change\"]}\n\n    static defaults() {\n        return {\n            allBlocks: false,\n            useScrollbars: false,\n            zoomInitial: 0.7\n        }\n    }\n\n    /**\n     * Создать экземпляр рабочей области\n     *\n     * @param {Object} options опции модуля в формате, задаваемом в методе {@link defaults}\n     */\n    constructor(options) {\n        super(options);\n\n        this._blockly  = new BlocklyWrapper();\n\n        this.shutUp();\n\n        this._state = {\n            display: false,\n            block_types: [],\n        };\n\n        this._code_storage = [];\n\n        this._blockly.registerBlockTypes(JSONBlocks);\n        this._blockly.registerGenerators(JSONGenerators);\n\n        this._blockly.setAudibles([\n            'event_key_onpush_letter',\n            'event_key_onpush_number',\n            'event_key_onpush_any',\n            'event_key_onpush_any_number'\n        ]);\n\n        this._subscribeToWrapperEvents();\n    }\n\n    /**\n     * Встроить рабочую область в DOM-узел\n     *\n     * @param {Element} dom_node DOM-узел, в который будет встроена рабочая область\n     */\n    inject(dom_node) {\n        return new Promise(resolve => {\n            if (!dom_node) {resolve(false)}\n\n            this._blockly.inject(dom_node, this._options.useScrollbars, false, this._options.zoomInitial);\n            this._state.display = true;\n\n            if (this._options.allBlocks) {\n                this._blockly.updateBlockTypes(JSONGenerators);\n            } else {\n                this._blockly.updateBlockTypes(this._state.block_types);\n            }\n\n            resolve();\n        });\n    }\n\n    /**\n     * Извлечь рабочую область\n     *\n     * Метод не сбрасывает настройки отображения Blockly\n     * и не изменяет его текущее состояние\n     */\n    eject() {\n        if (!this._state.display) {return true}\n\n        this._blockly.eject();\n        this._state.display = false;\n    }\n\n    /**\n     * Установить используемые блоки\n     *\n     * @param {Array} block_types массив строк с названиями типов блоков\n     */\n    setBlockTypes(block_types) {\n        this._state.block_types = block_types;\n\n        if (!this._state.display) {return true}\n\n        this._blockly.updateBlockTypes(block_types);\n    }\n\n    getBlockTypes() {\n        if (!this._state.display) {return false}\n\n        return this._blockly.getBlockTypes();\n    }\n\n    /**\n     * Подсветить блок\n     *\n     * Подсвеченный ранее блок гаснет.\n     * Если в качестве идентификатора задать null, только гаснет подсвеченный ранее блок\n     *\n     * @param {String|null} block_id идентификатор блока\n     */\n    highlightBlock(block_id) {\n        if (!this._state.display) {return false}\n\n        this._blockly.highlightBlock(block_id);\n    }\n\n    /**\n     * Выделить ошибочные блоки\n     *\n     * @param {Array<string>} block_ids идентификаторы блоков\n     */\n    highlightErrorBlocks(block_ids) {\n        if (!this._state.display) {return false}\n\n        for (let block_id of block_ids) {\n            this._blockly.highlightErrorBlock(block_id);\n        }\n    }\n\n    /**\n     * Удалить выделения ошибочных блоков\n     */\n    clearErrorBlocks() {\n        this._blockly.clearErrorBlocks();\n    }\n\n    /**\n     * Сохранить программный код для текущего упражнения\n     *\n     * @param {number} mission_id   ИД задания\n     * @param {number} exercise_id  ИД упражнения\n     *\n     * @returns {boolean} было ли изменено состояние модуля\n     */\n    saveProgram(mission_id, exercise_id) {\n        if (!this._state.display) {return false}\n\n        if (!(mission_id in this._code_storage)) {\n            this._code_storage[mission_id] = [];\n        }\n\n        this._code_storage[mission_id][exercise_id] = this._blockly.getXMLText();\n\n        return true;\n    }\n\n    /**\n     * Загрузить сохраненный для упражнения программный код\n     *\n     * @param {number} mission_id   ИД задания\n     * @param {number} exercise_id  ИД упражнения\n     *\n     * @returns {boolean} было ли изменено состояние модуля\n     */\n    loadProgram(mission_id, exercise_id) {\n        if (!this._state.display) {return false}\n\n        this._blockly.clear();\n\n        if (!(mission_id in this._code_storage)) {\n            console.log(\"NO MID IN STOR\");\n            return false;\n        }\n\n        if (!(exercise_id in this._code_storage[mission_id])) {\n            console.log(\"NO EXEC IN STOR\");\n            return false;\n        }\n\n        this._blockly.setXMLText(this._code_storage[mission_id][exercise_id]);\n\n        return true;\n    }\n\n    /**\n     * Возвратить несколько соседних блоков от текущего\n     *\n     * TODO\n     *\n     * @param {number} neighbours_amount количество соседних блоков (сверху и снизу)\n     */\n    getBlockMultiplet(neighbours_amount=3) {\n\n    }\n\n    /**\n     * Установить предел количества блоков\n     *\n     * @param {number} [max_block_count=0] максимальное количество блоков\n     */\n    setMaxBlockLimit(max_block_count=0) {\n        if (!this._state.display) {return false}\n\n        this._blockly.updateBlockLimit(max_block_count)\n    }\n\n    /**\n     * Установить режим редактирования\n     *\n     * @param [on=false] {boolean} вкл./выкл. режим редактирования\n     */\n    setEditable(on=false) {\n        if (!this._state.display) {return false}\n\n        if (on) {\n            this._blockly.unlock();\n        } else {\n            this._blockly.lock();\n        }\n    }\n\n    /**\n     * Возвратить значения полей ввода пределов количества блоков по типам\n     *\n     * Формат возвращаемого объекта:\n     *      - ключ:     {string} тип блока\n     *      - значение: {number} предел количества блоков по типу\n     *\n     * @returns {Object},\n     */\n    getBlockLimitInputsByType() {\n        if (!this._state.display) {return false}\n\n        return this._blockly.getBlockLimitInputsByType();\n    }\n\n    /**\n     * Установить значения полей ввода пределов количества блоков по типам\n     *\n     * @param block_counts {Object} , где\n     *      - ключ:     {string} тип блока\n     *      - значение: {number} предел количества блоков по типу\n     */\n    setBlockLimitInputsByType(block_counts) {\n        if (!this._state.display) {return false}\n\n        this._blockly.setBlockLimitInputsByType(block_counts);\n    }\n\n    /**\n     * Определить число блоков, необходимое для сборки\n     * текущей последовательности блоков\n     *\n     * @returns {bool|int} колиество блоков, необходимых для сборки текущей последовательности блоков\n     */\n    getBlockLimit() {\n        if (!this._state.display) {return false}\n\n        return this._blockly.getBlockLimit();\n    }\n\n    /**\n     * Возвратить список обработчиков в формате объекта\n     *\n     * @returns {{commands:Array, button:number}} обработчик, включающий код клавиши и код программы\n     */\n    getMainHandler() {\n        let handlers = this._blockly.getJSONHandlers();\n\n        let code = WorkspaceModule._preprocessCode(handlers.main);\n\n        return {commands: code, button: \"None\"};\n    }\n\n    /**\n     * Возвратить обработчик нажатия клавиши\n     *\n     * @param {number} btn_code код клавиши\n     *\n     * @returns {{commands:Array, button:number}} обработчик, включающий код клавиши и код программы\n     */\n    getButtonHandler(btn_code) {\n        if (!this._state.display) {return null}\n\n        let handlers = this._blockly.getJSONHandlers().sub;\n\n        for (let id of Object.keys(handlers)) {\n            let handler = handlers[id];\n\n            if (handler.btn === btn_code) {\n                handler.code = WorkspaceModule._preprocessCode(handler.code);\n\n                return handler;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Возвратить набранные коды\n     *\n     * Формат возвращаемого объекта:\n     *      - ключ: `main`/ ID блока-обработчика\n     *      - значение: {commands: {Array}, button: {number}}, где `commands` - JSON-код программы, `button` - код клавиши\n     *\n     * @returns {Object} основной код и коды обработчиков\n     */\n    getAllHandlers() {\n        if (!this._state.display) {return null}\n\n        let handlers_result = null;\n\n        try {\n            let _handlers = this._blockly.getJSONHandlers();\n\n            let code_main = WorkspaceModule._preprocessCode(_handlers.main);\n\n            handlers_result = {main: {commands: code_main, btn: \"None\"}};\n\n            for (let block_id of Object.keys(_handlers.sub)) {\n                handlers_result[block_id] = {\n                    commands: WorkspaceModule._preprocessCode(_handlers.sub[block_id].code),\n                    btn: _handlers.sub[block_id].btn\n                }\n            }\n        } catch (err) {\n            this._debug.error(err);\n            return handlers_result;\n        }\n\n        return handlers_result;\n    }\n\n    /**\n     * Возвратить XML-дерево кода в виде строки\n     *\n     * @returns {string} строка с XML-деревом\n     */\n    getTree() {\n        return this._blockly.getXMLText();\n    }\n\n    /**\n     * Загрузить XML-дерево в виде строки\n     *\n     * @param   {string} tree дерево в виде строки\n     *\n     * @returns {boolean} false, если строка пустая или не задана\n     */\n    loadTree(tree) {\n        if (!tree) {return false}\n\n        this._blockly.setXMLText(tree);\n    }\n\n    /**\n     * Разрешить обработку событий Blockly\n     */\n    wakeUp() {\n        this._blockly.silent = false;\n    }\n\n    /**\n     * Запретить обработку событий Blockly\n     *\n     * При отсутствии необходимости работы с Blockly\n     * обработку событий желательно отключить, так как сложные процедуры могут\n     * значительно повлиять на производительность всей среды\n     */\n    shutUp() {\n        this._blockly.silent = true;\n    }\n\n    /**\n     * Заставить Blockly генерировать дополнительные поля (для админки)\n     * Работает только с wakeUp()\n     *\n     * @param {boolean} on генерировать ли поля\n     */\n    generateExtraFields(on) {\n        if (this._blockly.silent) {return false}\n\n        this._blockly.extra_fields = !!on;\n\n        return true;\n    }\n\n    /**\n     * Обновить размер рабочей области\n     *\n     * Вызывать в случае, когда необходимо подогнать размер рабочей области\n     * под размер её контейнера\n     */\n    resize() {\n        if (this._state.display) {\n            this._blockly._onResize();\n        }\n    }\n\n    /**\n     * Подписаться на события обёрток\n     */\n    _subscribeToWrapperEvents() {\n        this._blockly.onChange(() => {\n            this.emitEvent(\"change\");\n        });\n        /**\n         * При изменении главного кода\n         */\n        // this._blockly.onChangeMain(main_code => {\n        //     this.emitEvent(\"change\", {\n        //         main: {\n        //             commands:   main_code,\n        //             btn:        \"None\"\n        //         },\n        //     });\n        // });\n\n        /* В момент изменения кода обработчиков Blockly */\n        // this._blockly.onChangeAudible((audible_id, audible_args) => {\n        //     audible_args.code = WorkspaceModule._preprocessCode(audible_args.code);\n        //\n        //     let data_to_send = {};\n        //\n        //     data_to_send[audible_id] = {\n        //         btn:        audible_args.btn\n        //     };\n        //\n        //     if (audible_args.code.length > 0) {\n        //         data_to_send[audible_id].commands = audible_args.code;\n        //     }\n        //\n        //     this.emitEvent(\"change\", data_to_send);\n        // });\n    }\n\n    /**\n     * Предварительная обработка кода, генерируемого Blockly\n     *\n     * Преобразует строку в JSON-объект\n     *\n     * @param {string} code исходный код, сгенерированный в Blockly\n     *\n     * @returns {Object} JSON-версия исходного кода, сгенерированного в Blockly\n     * @private\n     */\n    static _preprocessCode(code) {\n        if (!code) return [];\n\n        code = code.trim();\n\n        if (code.slice(-1) === \",\") {\n            code = code.slice(0, -1);\n        }\n\n        return JSON.parse(\"[\" + code + \"]\");\n    }\n}",
    "static": true,
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/app/js/modules/WorkspaceModule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "class",
    "name": "WorkspaceModule",
    "memberof": "js/modules/WorkspaceModule.js",
    "static": true,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "access": "public",
    "export": true,
    "importPath": "codehour-breadboard-web/js/modules/WorkspaceModule.js",
    "importStyle": "WorkspaceModule",
    "description": "Модуль \"Рабочая область\"\n\nПредоставляет набор методов для управления интерфейсом Blockly",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "js/core/Module.js~Module"
    ]
  },
  {
    "__docId__": 381,
    "kind": "get",
    "name": "eventspace_name",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule.eventspace_name",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "get",
    "name": "event_types",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule.event_types",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "defaults",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule.defaults",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"allBlocks\": *, \"useScrollbars\": *, \"zoomInitial\": number}"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#constructor",
    "access": "public",
    "description": "Создать экземпляр рабочей области",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "опции модуля в формате, задаваемом в методе {@link defaults}"
      }
    ]
  },
  {
    "__docId__": 385,
    "kind": "member",
    "name": "_blockly",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#_blockly",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "_state",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#_state",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"display\": *, \"block_types\": *}"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "_code_storage",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#_code_storage",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "inject",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#inject",
    "access": "public",
    "description": "Встроить рабочую область в DOM-узел",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "dom_node",
        "description": "DOM-узел, в который будет встроена рабочая область"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "eject",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#eject",
    "access": "public",
    "description": "Извлечь рабочую область\n\nМетод не сбрасывает настройки отображения Blockly\nи не изменяет его текущее состояние",
    "lineNumber": 85,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "setBlockTypes",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#setBlockTypes",
    "access": "public",
    "description": "Установить используемые блоки",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "block_types",
        "description": "массив строк с названиями типов блоков"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "getBlockTypes",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getBlockTypes",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "highlightBlock",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#highlightBlock",
    "access": "public",
    "description": "Подсветить блок\n\nПодсвеченный ранее блок гаснет.\nЕсли в качестве идентификатора задать null, только гаснет подсвеченный ранее блок",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "block_id",
        "description": "идентификатор блока"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "highlightErrorBlocks",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#highlightErrorBlocks",
    "access": "public",
    "description": "Выделить ошибочные блоки",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "block_ids",
        "description": "идентификаторы блоков"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "clearErrorBlocks",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#clearErrorBlocks",
    "access": "public",
    "description": "Удалить выделения ошибочных блоков",
    "lineNumber": 141,
    "params": [],
    "return": null
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "saveProgram",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#saveProgram",
    "access": "public",
    "description": "Сохранить программный код для текущего упражнения",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} было ли изменено состояние модуля"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mission_id",
        "description": "ИД задания"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "exercise_id",
        "description": "ИД упражнения"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "было ли изменено состояние модуля"
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "loadProgram",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#loadProgram",
    "access": "public",
    "description": "Загрузить сохраненный для упражнения программный код",
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} было ли изменено состояние модуля"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mission_id",
        "description": "ИД задания"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "exercise_id",
        "description": "ИД упражнения"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "было ли изменено состояние модуля"
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "getBlockMultiplet",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getBlockMultiplet",
    "access": "public",
    "description": "Возвратить несколько соседних блоков от текущего\n\nTODO",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "neighbours_amount",
        "description": "количество соседних блоков (сверху и снизу)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "setMaxBlockLimit",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#setMaxBlockLimit",
    "access": "public",
    "description": "Установить предел количества блоков",
    "lineNumber": 209,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "max_block_count",
        "description": "максимальное количество блоков"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "setEditable",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#setEditable",
    "access": "public",
    "description": "Установить режим редактирования",
    "lineNumber": 220,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "on",
        "description": "{boolean} вкл./выкл. режим редактирования"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "getBlockLimitInputsByType",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getBlockLimitInputsByType",
    "access": "public",
    "description": "Возвратить значения полей ввода пределов количества блоков по типам\n\nФормат возвращаемого объекта:\n     - ключ:     {string} тип блока\n     - значение: {number} предел количества блоков по типу",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object},"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "{Object},"
    },
    "params": []
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "setBlockLimitInputsByType",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#setBlockLimitInputsByType",
    "access": "public",
    "description": "Установить значения полей ввода пределов количества блоков по типам",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "block_counts",
        "description": "{Object} , где\n     - ключ:     {string} тип блока\n     - значение: {number} предел количества блоков по типу"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "getBlockLimit",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getBlockLimit",
    "access": "public",
    "description": "Определить число блоков, необходимое для сборки\nтекущей последовательности блоков",
    "lineNumber": 264,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{bool|int} колиество блоков, необходимых для сборки текущей последовательности блоков"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "bool",
        "int"
      ],
      "spread": false,
      "description": "колиество блоков, необходимых для сборки текущей последовательности блоков"
    },
    "params": []
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "getMainHandler",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getMainHandler",
    "access": "public",
    "description": "Возвратить список обработчиков в формате объекта",
    "lineNumber": 275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{commands:Array, button:number}} обработчик, включающий код клавиши и код программы"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{commands:Array, button:number}"
      ],
      "spread": false,
      "description": "обработчик, включающий код клавиши и код программы"
    },
    "params": []
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "getButtonHandler",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getButtonHandler",
    "access": "public",
    "description": "Возвратить обработчик нажатия клавиши",
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{commands:Array, button:number}} обработчик, включающий код клавиши и код программы"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "btn_code",
        "description": "код клавиши"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{commands:Array, button:number}"
      ],
      "spread": false,
      "description": "обработчик, включающий код клавиши и код программы"
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "getAllHandlers",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getAllHandlers",
    "access": "public",
    "description": "Возвратить набранные коды\n\nФормат возвращаемого объекта:\n     - ключ: `main`/ ID блока-обработчика\n     - значение: {commands: {Array}, button: {number}}, где `commands` - JSON-код программы, `button` - код клавиши",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} основной код и коды обработчиков"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "основной код и коды обработчиков"
    },
    "params": []
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "getTree",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#getTree",
    "access": "public",
    "description": "Возвратить XML-дерево кода в виде строки",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} строка с XML-деревом"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "строка с XML-деревом"
    },
    "params": []
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "loadTree",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#loadTree",
    "access": "public",
    "description": "Загрузить XML-дерево в виде строки",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} false, если строка пустая или не задана"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tree",
        "description": "дерево в виде строки"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "false, если строка пустая или не задана"
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "wakeUp",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#wakeUp",
    "access": "public",
    "description": "Разрешить обработку событий Blockly",
    "lineNumber": 368,
    "params": [],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "shutUp",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#shutUp",
    "access": "public",
    "description": "Запретить обработку событий Blockly\n\nПри отсутствии необходимости работы с Blockly\nобработку событий желательно отключить, так как сложные процедуры могут\nзначительно повлиять на производительность всей среды",
    "lineNumber": 379,
    "params": [],
    "return": null
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "generateExtraFields",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#generateExtraFields",
    "access": "public",
    "description": "Заставить Blockly генерировать дополнительные поля (для админки)\nРаботает только с wakeUp()",
    "lineNumber": 389,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "on",
        "description": "генерировать ли поля"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "resize",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#resize",
    "access": "public",
    "description": "Обновить размер рабочей области\n\nВызывать в случае, когда необходимо подогнать размер рабочей области\nпод размер её контейнера",
    "lineNumber": 403,
    "params": [],
    "return": null
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "_subscribeToWrapperEvents",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule#_subscribeToWrapperEvents",
    "access": "private",
    "description": "Подписаться на события обёрток",
    "lineNumber": 412,
    "params": [],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "_preprocessCode",
    "memberof": "js/modules/WorkspaceModule.js~WorkspaceModule",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/modules/WorkspaceModule.js~WorkspaceModule._preprocessCode",
    "access": "private",
    "description": "Предварительная обработка кода, генерируемого Blockly\n\nПреобразует строку в JSON-объект",
    "lineNumber": 456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} JSON-версия исходного кода, сгенерированного в Blockly"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "исходный код, сгенерированный в Blockly"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "JSON-версия исходного кода, сгенерированного в Blockly"
    }
  },
  {
    "kind": "index",
    "content": "codehour-breadboard-web",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"codehour-breadboard-web\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Codehour web application for bread board\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"clientjs\": \"^0.1.11\",\n    \"dom-to-image\": \"^2.6.0\",\n    \"intro.js\": \"^2.8.0-alpha.1\",\n    \"jquery\": \"^3.2.1\",\n    \"jquery-ui\": \"^1.12.1\",\n    \"jquery-ui-bundle\": \"^1.12.1\",\n    \"js-cookie\": \"^2.2.0\",\n    \"node-blockly\": \"^1.0.32\",\n    \"socket.io-client\": \"^2.0.4\",\n    \"svgjs\": \"^2.6.2\",\n    \"sweetalert\": \"^2.1.0\",\n    \"webpack\": \"^3.10.0\"\n  },\n  \"devDependencies\": {\n    \"@ryancavanaugh/jquery.ui.layout\": \"0.0.13-alpha\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-loader\": \"^7.1.2\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"chai\": \"^4.1.2\",\n    \"chai-spies\": \"^0.7.1\",\n    \"copy-webpack-plugin\": \"^4.3.1\",\n    \"css-loader\": \"^0.28.9\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"expose-loader\": \"^0.7.4\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"jasmine-core\": \"^2.8.0\",\n    \"jshint\": \"^2.9.5\",\n    \"jshint-loader\": \"^0.8.4\",\n    \"karma\": \"^1.7.1\",\n    \"karma-chai\": \"^0.1.0\",\n    \"karma-chrome-launcher\": \"^2.2.0\",\n    \"karma-coverage\": \"^1.1.1\",\n    \"karma-firefox-launcher\": \"^1.1.0\",\n    \"karma-ie-launcher\": \"^1.0.0\",\n    \"karma-jasmine\": \"^1.1.1\",\n    \"karma-junit-reporter\": \"^1.2.0\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-mocha-reporter\": \"^2.2.5\",\n    \"karma-opera-launcher\": \"^1.0.0\",\n    \"karma-phantomjs-launcher\": \"^1.0.4\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-webpack\": \"^2.0.7\",\n    \"less\": \"^3.0.1\",\n    \"less-loader\": \"^4.0.5\",\n    \"mocha\": \"^4.0.1\",\n    \"phantomjs-prebuilt\": \"^2.1.16\",\n    \"style-loader\": \"^0.19.1\"\n  },\n  \"scripts\": {\n    \"build\": \"webpack -p\",\n    \"watch\": \"webpack --watch\",\n    \"test:single\": \"rm -rf tmp/ && karma start karma.conf.js --single-run --browsers Chrome\",\n    \"test:watch\": \"karma start karma.conf.js --browsers Chrome\",\n    \"docs\": \"./node_modules/.bin/esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://bitbucket.org/makeitlab/codehour-breadboard-web.git\"\n  },\n  \"keywords\": [\n    \"codehour\",\n    \"breadboard\",\n    \"makeitlab\",\n    \"tapanda\",\n    \"topanda\"\n  ],\n  \"author\": \"Alexander Molodykh\",\n  \"license\": \"ISC\",\n  \"homepage\": \"https://bitbucket.org/makeitlab/codehour-breadboard-web#readme\"\n}\n",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "[logo]: manual/asset/logo.png \"CodeHour: Breadboard\"\n\n![CodeHour: Breadboard logo][logo]\n\n_CodeHour: Breadboard project_\n\n## Документация к web-интерфейсу приложения \"Тапанда: макетная плата\"\n\nОписывает реализацию части проекта, запускаемой в браузере и содержит инструкции по её настройке и использованию.\n\nУтверждает соглашения для дальнейшей разработки.\n\nСодержание:\n\n1. [Общая информация](manual/overview.html)\n2. [Архитектура](manual/design.html)\n3. [Установка и сборка](manual/installation.html)\n4. [Конфигурирование](manual/configuration.html)\n5. [Использование](manual/usage.html)\n6. [Примеры](manual/usage.html)\n\n_На данный момент исходный код проекта размещён в закрытом репозитории._",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/index.md",
    "name": "./man/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/asset",
    "name": "./man/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/overview.md",
    "name": "./man/overview.md",
    "content": "# Общая информация\n\nЦель:\n\nЗадачи:\n\n\nИнструментарий проекта:\n\n* **Языки программирования**:\n* JavaScript (ES6)\n* LESS\n\n\n* **Сборка**:\n* Webpack\n* Babel \n\n\n* **Тестирование**\n* Karma\n* Jasmine\n* Chai\n* Mocha\n\n\n* **Документирование**\n* ESDoc\n\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/design.md",
    "name": "./man/design.md",
    "content": "# Архитектура\n\n## Предисловие\n\nВ проекте намернно не используются фреймворки с целью создать решение, \nмаксимально независимое от сторонних разработок:\n\n[ССЫЛКИ]\n\nКроме того, планируется полностью избавиться от таких больших библиотек, как jQuery, jQuery UI и jQuery Layout.\n\n## Программный каркас\n\nСуществует две части архитектуры: общая и частная.\n\nОбщую часть будем называть _ядром_, его код содержит базовые классы, \nкоторые выступают в роли ограничивающих сущностей, поддерживающих структуру реализуемых на этом ядре приложений.\n\nЧастная же архитектура уникальна для каждого приложения и состоит из комбинации различных модулей.\n\n### Ядро\n\nЯдро предоставляет набор следующих базовых сущностей:\n\n* __Обёртка__\n* __Модуль__\n* __Диспетчер__\n\nКод ядра хранится в каталоге `core`.\n\n[ПРИМЕР]\n\n#### Основные сущности ядра\n\n> __Обёртки__ - зависимые компоненты модулей:\n> \n> * используются только модулями,\n> * могут использовать одну или сразу несколько библиотек схожего назначения.\n\nОбёртки используются для создания API, независимого от библиотек.\nРоль обёртки заключается в абстрагировании модулей от библиотек так, что при обновлении библиотеки\nдостаточно произвести изменения в обёртке, а внутренняя структура модуля останется без изменений.\n\nЕсли требуется обернуть собственную (самописную) библиотеку, её следует размещать в виде _утилиты_.\nФормально утилиты не имеют структурных ограничений, однако по возможности их следует избегать. \n\nБазовый класс обёртки, `Wrapper`, описан в `core/Wrapper.js`.\nОбёртки-наследники располагаются в каталоге `wrappers`.\nУтилиты располагаются в каталоге `utils`.\n\n> __Модули__ - независимые компоненты приложений:\n>\n> * самостоятельны, не знают о существовании приложений и других модулей,\n> * могут использоваться не только приложениями (например, когда состоят из статических методов).\n\nЗадача модуля - предоставить приложению набор методов, которые можно вызывать единично\n(как команду, без циклов/условий и т.д.). \n\nБазовый класс модуля, `Module`, описан в `core/Module.js`.\nМодули-наследники располагаются в каталоге `modules`.\n\n> __Диспетчер__ - менеджер событий модулей:\n>\n> * не знает о существовании приложения, но управляет модулями,\n> * каждое приложение обладает единственным диспетчером.\n\nЗадача диспетчера - сообщить приложение с модулями, вызывая обработчики _суррогатных событий_ в приложении \nдля обработки событий в модулях. В качестве обработчиков выступают цепочки обещаний.\n\nКласс диспетчера, `Dispatcher`, описан в `core/Dispatcher.js`.\n\n### Приложение\n\n> Каждое _приложение_ есть множество модулей, объёдинённых логикой в виде обработчиков \n> суррогатных событий.\n\nПриложение может определять свои функции, иметь внутренние методы. \n\nЛогика приложения состоит:\n* в конфигурировании модулей,\n* в обработке суррогатных событий,\n* в управлении доступом к событиям с помощью Диспетчера.\n\nКогда возникает необходимость коммуникации модулей в одном приложении, \nиспользуются _суррогатные события_.\n\nДля задания обработчиков суррогатных событий можно использовать _Promise-цепочки_.\n\n#### Суррогатные события\n\n> __Суррогатное событие__ - переименованное событие, имеющее непосредственное отношение к функциональности модуля.\n\nПростыми словами, это _обёртки сторонних событий_.\n\nПо своей сути, такие события не являются самостоятельными - они возникают в результате двух причин:\n* обёртка модуля генерирует событие оборачиваемой библиотеки,\n* в модуле происходит собственное событие, о котором, вероятно, должно знать приложение.\n\nСуррогатные события также отличаются тем, \nчто в приложении формально невозможно подписаться на них или отписаться от них.\nВместо этого доступом к событиям управляет _диспетчер_, работающий в приложении.\n\nДля управления доступом к событиям в приложении диспетчер предоставляет два инструмента:\n* сокращённая форма записи подмножеств суррогатных событий,\n* функции временного включения/отключения запуска обработчиков событий в этих подмножествах.\n\n##### Подмножества суррогатных событий\n\nДиспетчер использует следующий формат задания подмножеств:\n\n`имя_модуля:имя_события`, где \n\n* `имя_модуля` - сокращённое название класса модуля (например, `log`),\n* `имя_события` - полное название суррогатного события (например, `ready`).\n\nПри этом в качестве `имя_модуля` и `имя_события` можно использовать символ подстановки `*`,\nозначающий в следующих случаях:\n* `*:имя_модуля` - все события модуля `имя_модуля`,\n* `имя_события:*` - события `имя_события` всех модулей.\n\nЕсли требуется указать диспетчеру на все возможные события, допускается использование `*` \nвместо всей строки.\n\n##### Функции управления доступом к событиям\n\n```javascript\n    Dispatcher.only();   //впредь прослушивать только заданные события\n\tDispatcher.aside();  //впредь прослушивать все события, кроме заданных\n\tDispatcher.all();    //впредь прослушивать все типы событий\n\tDispatcher.on();     //как только произошло событие, вызвать функцию\n\tDispatcher.always(); //всегда прослушивать заданные события \n```\n\nВ качестве аргумента этих функций во всех случаях выступает массив элементов типа “строка”.\n\n```javascript\n    /* Пример 1: */ dispatcher.only(['gui:*', 'ls:*']); // прослушивать только события модулей GUI и LocalServer\n    /* Пример 2: */ dispatcher.only(['ls:exec-stop']);  // прослушивать только событие останова кода от локального сервера\n```\n\n[ПРИМЕР]\n\n#### Promise-цепочки\n\n>_Цепочка обещаний_ - последовательность операций модулей, обрабатывающих события одного типа. \n\nЦепочка обычно завершается командой диспетчеру включить или отключить прослушивание событий. \nЭто можно назвать _“ограничением состояния”_ - когда приложение обрабатывает только ограниченный \nнабор событий, находясь в определённом состоянии.\n\n[ПРИМЕР]\n\n## Соглашения по именованию\n\nКлассы-наследники обёрток `FooWrapper` расположены в файлах `wrappers/FooWrapper.js`, где `Foo` - CamelCase-префикс, \nкратко и понятно описывающий функциональное назначение обёртки/оборачиваемой(-ых) библиотеки(-к).\n\nКлассы-наследники модулей `FooModule` расположены в файлах `modules/FooModule`, где `Foo` - CamelCase-префикс, \nкратко и понятно описывающий функциональное назначение модуля.\n\nКлассы-приложения `FooBarApplication` расположены в файлах `foo_bar.js`, где `FooBar` - CamelCase-префикс, \nкратко и понятно описывающий функциональное назначение приложения.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/installation.md",
    "name": "./man/installation.md",
    "content": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/usage.md",
    "name": "./man/usage.md",
    "content": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/configuration.md",
    "name": "./man/configuration.md",
    "content": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/man/example.md",
    "name": "./man/example.md",
    "content": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Applications/MAMP/htdocs/codehour-breadboard/codehour-breadboard-web/CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "",
    "static": true,
    "access": "public"
  }
]